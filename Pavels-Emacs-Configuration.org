#+TITLE: Pavel's Emacs Configuration
#+CATEGORY: emacs

#+begin_abstract
After trying to use many distributions I finally decided to start mine
from scratch. Initially it has started from extending [[https://github.com/freetonik/castlemacs][Castlemacs]]
distribution, then I found Protesilaos Stavrou' [[https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/][dotfiles]] and got
hooked with literate programming, to this file was born. Over time it
became my log of using Emacs.

#+end_abstract

* Emacs binaries and versions

As of <2021-07-03 Sat> I use [[https://github.com/railwaycat/homebrew-emacsmacport][emacs-plus@28]] installed as:

#+begin_src sh
brew tap d12frosted/emacs-plus
brew install emacs-plus@28 --with-native-comp --with-xwidgets --with-modern-yellow-icon
#+end_src

Other notable options that I've been using in the past:
- [[https://emacsformacosx.com][emacsformacosx.com]]
- [[https://github.com/railwaycat/homebrew-emacsmacport][Emacs Mac port]]

** DONE Many things broken in emacs-mac 27.2 (prebuilt binary) after using emacs-plus@28 :Emacs28:Emacs27:
CLOSED: [2021-07-03 Sat 20:48]
:PROPERTIES:
:EXPORT_AUTHOR: Pavel P.
:EXPORT_FILE_NAME: using-emacs-plus.html
:EXPORT_DATE: <2021-05-01 Sat>
:END:

Pros of emacs-plus@28:
+ Better switch between light and dark modes, themes are configurable
  and I chose modus-vivendi and modus-operandi
+ I like GUI dialogs better

Broken things in emacs-mac 27.2 (prebuilt binary):
- Line in *Messages*: function make-closure is void
- Lispy is not enabled
- Line numbers are not enabled

I'm not using Emacs 27 anymore as of <2021-07-03 Sat>.

* Packages
** Package archives
<2020-12-29 Tue>

In order for =package.el= to download packages they should be
specified in repository.

#+begin_src emacs-lisp
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
#+end_src

** Configure use-package
 Configure `use-package' prior to loading it.

#+begin_src emacs-lisp
(setq
  use-package-always-ensure nil ;; this will prevent errors of installing emacs- and js-mode- packages
  use-package-always-defer nil
  use-package-always-demand nil
  use-package-expand-minimally nil
  use-package-enable-imenu-support t
  ;; The following is VERY IMPORTANT.  Write hooks using their real name
  ;; instead of a shorter version: after-init ==> `after-init-hook'.
  ;;
  ;; This is to empower help commands with their contextual awareness,
  ;; such as `describe-symbol'.
  use-package-hook-name-suffix nil)
#+end_src

** =straight.el=
<2021-06-27 Sun>

https://github.com/raxod502/straight.el

straight.el is a replacement for package.el, not use-package.
use-package can be used with either package.el or straight.el.

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
#+end_src

** =use-package=
https://github.com/jwiegley/use-package

As of <2021-07-03 Sat> I load =use-package= via =straight.el=.

#+begin_example emacs-lisp
(add-to-list 'load-path "~/.emacs.d/packages/use-package")
(load "use-package")

(require 'use-package)
#+end_example

** Custom packages
<2020-09-24 Thu>

Some packages are not in MELPA, so we need either download them
manually or have some mechanism doing that for us.

#+begin_src  emacs-lisp
;; Load custom packages
(add-to-list 'load-path "~/.emacs.d/packages")
(load "visit-source")
#+end_src

*** DONE Figure out how to download packages from Github url
CLOSED: [2020-11-28 Sat 12:41]

Use =straight.el=.


[[https://github.com/turbo-cafe/flymake-kondor][Flymake-kondor]] repo has an example how to do it:

#+begin_example
(el-get-bundle
 flymake-kondor
 :url "https://raw.githubusercontent.com/turbo-cafe/flymake-kondor/master/flymake-kondor.el"
 (add-hook 'clojure-mode-hook #'flymake-kondor-setup))
#+end_example

*** Toggle functions
Link: [[https://www.reddit.com/r/emacs/comments/l4v1ux/one_of_the_most_useful_small_lisp_functions_in_my/][One of the most useful small lisp functions in my config]]

#+begin_src emacs-lisp
(load "toggle-function")

(defun pp/make-toggle-scratch ()
  "Toggle *scratch* buffer back and forth."
  (interactive)
  (make-toggle-function "*scratch*" (lambda ())))

(defun pp/make-toggle-eshell ()
  "Toggle *eshell* buffer back and forth."
  (interactive)
  (make-toggle-function "*eshell*" 'eshell))

(global-set-key (kbd "C-h SPC") (pp/make-toggle-scratch))
#+end_src

#+begin_example emacs-lisp
(funcall ((lambda (arg1) (lambda () (message "foo: %s" arg1))) "bar"))
#+end_example

* Reference cards / cheatsheets

- [[https://www.gnu.org/software/emacs/refcards/][GNU Emacs Reference Cards]]

- [[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][Emacs cheatsheet]]
- [[https://www.gnu.org/software/emacs/refcards/pdf/survival.pdf][Emacs survival card]]
- [[https://www.gnu.org/software/emacs/refcards/pdf/calccard.pdf][Calc]]
- [[https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf][Dired]]
- [[https://www.gnu.org/software/emacs/refcards/pdf/orgcard.pdf][Org]]

* Regenerating Elisp code from Org code
#+begin_src emacs-lisp
(use-package emacs

  :config
  (defun pp/delete-emacs-init ()
    "Delete emacs-init.el file."
    (interactive)
    (delete-file "~/.emacs.d/emacs-init.el"))

  :hook (kill-emacs-hook . pp/delete-emacs-init)
 ;;  (kill-emacs-hook . package-quickstart-refresh)
)
#+end_src

* Server mode
Needed to edit commit messages from Eshell when running git commands.

#+begin_src emacs-lisp
(unless (boundp 'server-process)
  (server-start))
#+end_src
* GUI configuration
#+begin_src emacs-lisp
(tool-bar-mode -1)    ;; Hide tool bar
(scroll-bar-mode -1)  ;; Hide scroll bar
(fringe-mode '(1 . 1))
#+end_src

* Init
#+begin_src emacs-lisp

;; Do run below command from time to time.
;; (package-refresh-contents)

(use-package diminish :ensure t
  :after use-package)

(use-package exec-path-from-shell :ensure t
  :config
  (setq exec-path-from-shell-variables '("PATH" "MANPATH" "GOPATH" "JAVA_HOME" "AWS_REGION"))
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)))

;; adding directories with binaries.
;;(setq exec-path (append exec-path '("/Users/pavel/go/bin"
;;                                    "/usr/local/bin"
;;                                    "/Users/pavel/.pyenv/shims")))
#+end_src

* Working with Buffers
<2021-03-07 Sun>

- =C-x b=, (switch-to-buffer) :: Switch to buffer
- =C-x C-b=, (list-buffers) :: Open a list of buffers in a separate buffer

- (consult-buffer) :: Consult interface for switching buffers
- (bufler-switch-buffer) :: Bufler interface for switching buffers

** Bufler
<2021-03-07 Sun>

by u/alphapapa.

Creates a tree-organised list of buffers, nodes are bound to projects/buffer types.

- =bufler= :: open Bufler buffer

#+begin_src emacs-lisp
(use-package bufler :ensure t)
#+end_src

** Frog Jump Buffer

#+begin_src emacs-lisp
(use-package frog-jump-buffer :ensure t
  :config
  (setq frog-jump-buffer-default-filters-capital-letters nil
       frog-menu-avy-keys (append (string-to-list "absdflkjgh")
                                  (string-to-list "qwerpoiuty")
                                  (string-to-list "zxcvmn")
                                  (string-to-list (upcase "asdflkjgh"))
                                  (string-to-list (upcase "qwerpoiuty"))
                                  (string-to-list (upcase "zxcvmnb"))
                                  (number-sequence ?, ?@))))
#+end_src

*** TODO frog-jump-buffer doesn't work in Emacs 27.1
<2021-04-30 Fri>

*** TODO =all-the-icons-ivy= prevents filters from work
https://github.com/waymondo/frog-jump-buffer/issues/23

#+begin_example emacs-lisp
(use-package all-the-icons-ivy :ensure t)
#+end_example


** Unique buffer names

#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+end_src

* Going around in a buffer
<2021-03-07 Sun>

- =C-;=, (evil-avy-goto-char) :: provide =char= that will be
  highlighted to a quick jump to a point
- =s-m=, (consult-mark) :: open a fuzzy selector to jump to a mark
- =M-r=, (move-to-window-line-top-bottom) :: moves cursor to the
  middle, then top, then bottom of the screen

** Marks
<2021-03-07 Sun>

Evil-marks are clones of vim marks, and work like this:
1. Create a mark via =m <char>=
2. Jump to a mark via =` <char>=

Emacs marks use (mark-ring), and works like this:
1. Create a mark via =C-SPC C-SPC= (or in Evil mode using =v v=) - so
   it is "start selection", "stop selection"
2. Go to previous mark using =C-u C-SPC=, or using (consult-mark), =s-m= command.

- =C-x C-SPC=, (pop-global-mark) :: Move cursor to previous marked
  position (may be in another buffer). Works if you run (isearch),
  =C-s= and moved somewhere and then you need to get back to your
  previous position.

Update <2021-04-28 Wed>: Watched a video [[https://youtu.be/Dq5UOt63Mms][Efficient Text Selection with
Emacs Key Bindings]].

#+begin_src emacs-lisp
(setq
  mark-ring-max 128
  set-mark-command-repeat-pop t)
#+end_src

Links:
- http://ergoemacs.org/emacs/emacs_jump_to_previous_position.html

** Jumping - better-jumper - disabled
<2021-03-07 Sun> <2021-06-08 Tue>

It's needed when you moved coursor to some position in the buffer
without ISearch, but using =avy=, =evil-snipe= or evil motions, like
=5j= (move 5 lines down) and want to get back to where you've been
before.

I'm trying to use [[https://github.com/gilbertw1/better-jumper][better-jumper]] to get back to previous position
after jumps.

- =s-[=, =better-jumper-jump-backward= :: jump backwards
- =s-]=, =better-jumper-jump-forward= :: jump forwards

#+begin_example emacs-lisp
;; (use-package better-jumper :ensure t
;;   :config
;;   (setq better-jumper-context 'buffer
;;         better-jumper-add-jump-behavior 'append
;;         better-jumper-max-length 16)
;;   (better-jumper-mode 1))

;https://www.reddit.com/r/emacs/comments/ntnhkc/how_i_jump_around_emacs_with_betterjumper/
(use-package better-jumper

    :custom

    ; this is the key to avoiding conflict with evils jumping stuff
    (better-jumper-use-evil-jump-advice nil)

    :config
    (better-jumper-mode 1)

    ; this lets me toggle between two points. (adapted from evil-jump-backward-swap)
    ;; (evil-define-motion better-jumper-toggle (count)
    ;;   (let ((pnt (point)))
    ;;     (better-jumper-jump-backward 1)
    ;;     (better-jumper-set-jump pnt)))

    ; this is the key here. This advice makes it so you only set a jump point
    ; if you move more than one line with whatever command you call. For example
    ; if you add this advice around evil-next-line, you will set a jump point
    ; if you do 10 j, but not if you just hit j. I did not write this code, I
    ; I found it a while back and updated it to work with better-jumper.
    (defun my-jump-advice (oldfun &rest args)
      (let ((old-pos (point)))
        (apply oldfun args)
        (when (> (abs (- (line-number-at-pos old-pos) (line-number-at-pos (point))))
                  1)
          (better-jumper-set-jump old-pos))))

    ; jump scenarios
    (advice-add 'evil-next-line :around #'my-jump-advice)
    (advice-add 'evil-previous-line :around #'my-jump-advice)
    (advice-add 'helm-swoop :around #'my-jump-advice)
    (advice-add 'evil-goto-definition :around #'my-jump-advice)
    (advice-add 'evil-goto-mark  :around #'my-jump-advice))
#+end_example

Another alternative is Evil's =evil-jump=, which is turned on in Evil
mode:

- =C-o=, (evil-jump-backward) :: jump backward
- =C-i=, (evil-jump-forward) :: jump forward

** Gumshoe: a spatial Point movement tracker
<2021-06-27 Sun> <2021-06-29 Tue>

- https://github.com/overdr0ne/gumshoe
- [[https://www.reddit.com/r/emacs/comments/o8e6om/gumshoe_follows_you_around_and_logs_your_movements/][Discussion on Reddit]]

#+begin_example emacs-lisp
(use-package gumshoe
  :straight (gumshoe :type git
                     :host github
                     :repo "Overdr0ne/gumshoe"
                     :branch "master")
  :config
  ;; The minor mode must be enabled to begin tracking
  (global-gumshoe-mode 1))
#+end_example


** Moving back
<2021-03-07 Sun>

I found this tiny helper to move back to last change, will try to use it.

- =g ;=, =goto-last-change= :: go to last change
- =g ,= :: go to last change reverse

#+begin_src emacs-lisp
(use-package goto-last-change :ensure t)
#+end_src

** Evil-Snipe - two-char jumps
<2021-03-07 Sun>

- =s= :: prompt for two chars, jumps there forward, subsequent =;=
  jumps to the next match
- =S= :: prompt for two chars, jumps there backward, subsequent =;=
  jumps to the next match

#+begin_src emacs-lisp
(use-package evil-snipe :ensure t
  :diminish evil-snipe-local-mode
  :init (evil-snipe-mode +1)
  :config (setq evil-snipe-scope 'visible))
#+end_src

** Avy - single-char jumps
<2021-03-07 Sun>

#+begin_src emacs-lisp
(use-package avy :ensure t)
#+end_src

** Isearch - searching in a buffer
<2021-06-26 Sat>

Alternatives - https://github.com/raxod502/ctrlf

* Working with windows

#+begin_src emacs-lisp
(use-package ace-window :ensure t
  :config
  (setq aw-keys '(?h ?j ?k ?l ?f ?g ?d ?s ?a)))
#+end_src

* Getting help, documentation

- =C-h=, =F1= :: open help key drawer
- =F1 v=, =describe-variable= :: Describe variable
- =F1 f=, =describe-function= :: Describe function

** Info mode
- =<backspace>= :: go back

** DONE Integrate DevDocs?
CLOSED: [2020-09-24 Thu 11:51]
:PROPERTIES:
:CREATED:  [2020-09-24 Thu 09:53]
:END:
:LOGBOOK:
CLOCK: [2020-09-24 Thu 09:15]--[2020-09-24 Thu 10:15] =>  1:00
:END:
<2020-09-24 Thu>
I've found the blog post [[https://scripter.co/accessing-devdocs-from-emacs/][Accessing Devdocs from Emacs]] which suggests
using =devdocs-lookup= package.

It's not published to MELPA, so we need to download it from Github. For now I'll do it manually using =curl=
and save to custom packages folder ~/.emacs.d/packages.

#+begin_src emacs-lisp
;; (use-package devdocs-lookup :ensure t) -- doesn't work since not on MELPA
(load "devdocs-lookup")
(devdocs-setup)
#+end_src

* Modifier keys
Control is control, and I also changed Caps Lock to Control in the
Keyboard preferences in macOS.

#+begin_src emacs-lisp
(setq
  mac-command-modifier 'super
  mac-option-modifier 'meta)
#+end_src

On <2021-04-28 Wed> I set up Leopold FC700RT keyboard, and remapped
its Command key to Option, and Option key to Command in macOS
keyboard-specific settings. But for an unknown reason, its right
option and left Meta keys became interchanged, so I simplified setup
to have both left and right command and Option keys serve as Super and
Meta respectively. Page where I read about Emacs handling of special
keys is [[https://emacs.stackexchange.com/questions/24902/for-macos-how-to-bind-left-and-right-option-keys-separately][For MacOS: how to bind left and right option keys separately?]]

** DONE How to use Fn key on Leopold FC700RT keyboard?
CLOSED: [2021-04-28 Wed 18:07]
:PROPERTIES:
:CREATED: <2021-04-28 Wed>
:END:

F1-F4 are repeat rate adjustments, F5 is WinKey lock, F6 is Previous
Track, F7 is Play/Pause, F8 is Next Track, F9-12 are Stop/Mute/Volume
Down/Volume Up. Home and End toggle between N-Key and 6-Key rollover.
That's from
http://www.leopold.co.kr/?doc=cart/item.php&it_id=1406876444.

* Tweaking usage on macOS
<2021-07-03 Sat>
Finda [[https://keminglabs.com/finda/setup/#a-note-on-fullscreen][recommends]] disabling animations.

#+begin_src emacs-lisp
(setq ns-use-native-fullscreen nil)
#+end_src

* Sane defaults

#+begin_src emacs-lisp
;; Smoother and nicer scrolling
(setq
  scroll-margin 0
  scroll-step 1
  next-line-add-newlines t
  visible-bell nil
  scroll-conservatively 10000
  scroll-preserve-screen-position t
  mouse-wheel-follow-mouse t
  mouse-wheel-scroll-amount '(1 ((shift) . 1)))

(setq-default
  auto-save-default nil    ;; Don't bother with auto save
  make-backup-files nil    ;; and backups.
  delete-by-moving-to-trash t  ;; Move file to trash instead of removing.
  indent-tabs-mode nil)        ;; Indent using spaces by default

;; Revert (update) buffers automatically when underlying files are changed externally.
(global-auto-revert-mode t)

(setq
  inhibit-startup-message t              ;; Don't show the startup message...
  inhibit-startup-screen t               ;; ... or screen
  cursor-in-non-selected-windows nil     ;; Hide the cursor in inactive windows
  ;echo-keystrokes 0.1                   ;; Show keystrokes right away, don't show the message in the scratch buffer
  initial-scratch-message nil            ;; Empty scratch buffer
  ;initial-major-mode 'org-mode           ;; Org mode by default in *scratch* buffer
  sentence-end-double-space nil          ;; Sentences should end in one space
  confirm-kill-emacs 'y-or-n-p           ;; y and n instead of yes and no when quitting
  help-window-select t                   ;; Select help window so it's easy to quit it with 'q'
  large-file-warning-threshold 10000000  ;; Warn only when opening files bigger than 10MB
  )

(fset 'yes-or-no-p 'y-or-n-p)      ; y and n instead of yes and no everywhere else
(delete-selection-mode 1)          ; Delete selected text when typing
(global-unset-key (kbd "s-p"))     ; Don't print, later =s-p= remapped to open files in the project

#+end_src

* Working with files
** Recent files
#+begin_src emacs-lisp

;; (defmacro with-suppressed-message (&rest body)
;;   "Suppress new messages temporarily in the echo area and the
;;   `*Messages*' buffer while BODY is evaluated."
;;   (declare (indent 0))
;;   (let ((message-log-max nil))
;;     `(with-temp-message (or (current-message) "") ,@body)))

;; (setq save-silently t)
;; (with-suppressed-message (recentf-save-list))

(defun pp/recentf-save-list ()
  "Save recentf list supressing message."
  (let ((inhibit-message t)) (recentf-save-list)))

(use-package recentf
  :init
  (recentf-mode 1)
  (run-at-time "5 min" 300 'pp/recentf-save-list)
  :config
  (setq
    create-lockfiles nil
    recentf-max-menu-items 20
    recentf-max-saved-items 1000))
#+end_src

*** When switching to Emacs a Warning issued "recentf mode: Non-character input-event"
<2020-12-08 Tue>
https://github.com/syl20bnr/spacemacs/issues/5554

- I added =setq create-lockfiles nil=, let's see if it helps - looks
  like not really.

** Opening files
I use =pp/visit-or-open= function, bound to =s-o= globally.

#+begin_src emacs-lisp
(defun pp/visit-or-open ()
  "Try to 'visit-source', if fail, then fallback to 'find-file'."
  (interactive)
  (or
    (visit-source)
    (call-interactively 'find-file)))
#+end_src

*** TODO Remove trailing dot from text under cursor before trying to =visit-source=

Acceptance: having cursor above ~/repos/dotfiles/emacs.d/packages.
should open the folder in Dired.

Maybe also don't take into account other Org-related markup, like
=./filename.txt=.

* Working with lists and hash-maps
#+begin_src emacs-lisp
(use-package dash :ensure t)
#+end_src

* Clipboard / Copy / Yank / Paste / Delete
<2020-11-22 Sun> <2021-06-19 Sat>

- *Shortcuts*
  - =C-y= :: yank – paste from Emacs' clipboard (without Evil)
  - =M-y= :: yank from kill ring with completion-read, Evil copies there

  - =s-x= :: cut to macOS clipboard
  - =s-c= :: copy to macOS clipboard
  - =s-v= :: paste from macOS clipboard

#+begin_src emacs-lisp
;; We need Emacs kill ring and system clipboard to be
;; independent. Simpleclip is the solution to that.
(use-package simpleclip :ensure t
  :init (simpleclip-mode 1))

(defun pp/copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                      (file-name-nondirectory (buffer-file-name)))))
    (when filename
      (simpleclip-set-contents filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))

(defun pp/copy-file-path-to-clipboard ()
  "Copy the current buffer file path to the clipboard."
  (interactive)
  (let ((filepath (if (equal major-mode 'dired-mode)
                      default-directory
                      (buffer-file-name))))
    (when filepath
      (simpleclip-set-contents filepath)
      (message "Copied buffer file path '%s' to the clipboard." filepath))))
#+end_src

** Does paste from Emacs clipboard (copied by Evil's =y=) work in minibuffer?  :Learning:
<2021-06-19 Sat>

Yes! Use =C-y= to paste from Emacs clipboard or =s-v= to paste from
macOS clipboard.

* Calendar
<2021-04-17 Sat>

https://www.emacswiki.org/emacs/CalendarLocalization
[[https://ftp.gnu.org/old-gnu/Manuals/emacs-20.7/html_chapter/emacs_33.html][The Calendar and the Diary]]

#+begin_src emacs-lisp
(use-package calendar
  :config
  (setq calendar-week-start-day 1))
#+end_src

** DONE Figure out how to select a date from Calendar using keyboard
<2021-04-18 Sun>
CLOSED: [2021-04-18 Sun 17:04]

[[https://orgmode.org/manual/The-date_002ftime-prompt.html][Manual - 8.2.1 The date/time prompt]]

- RET :: Choose date at point in calendar.
- mouse-1 :: Select date by clicking on it.
- S-RIGHT :: One day forward.
- S-LEFT :: One day backward.
- S-DOWN :: One week forward.
- S-UP :: One week backward.
- M-S-RIGHT :: One month forward.
- M-S-LEFT :: One month backward.
- > :: Scroll calendar forward by one month.
- < :: Scroll calendar backward by one month.
- M-v :: Scroll calendar forward by 3 months.
- C-v :: Scroll calendar backward by 3 months.
- C-. :: Select today’s date63

* Working with text
** Google Translate
<2020-11-19 Thu> <2021-03-07 Sun>

- =go-translate= :: for translating word under cursor (with prompt)
- =C-n=, =C-p= :: to change language sequences when prompted

Alternative to proprietary Google Translate is https://libretranslate.com.
https://github.com/uav4geo/LibreTranslate

#+begin_src emacs-lisp
(use-package go-translate :ensure t
  :config
  (setq
   go-translate-token-current (cons 430675 2721866130)
   go-translate-local-language "ru"
   go-translate-target-language "en"
   go-translate-extra-directions '(("nl" . "en"))))
#+end_src

** Text Editing
<2021-03-07 Sun>

- =M-q=, =fill-paragraph= :: wraps long-lined paragraph at 80 points
- =M-t=, =transpose-word= :: moves word under cursor to the right,
  respecting non-word symbolñs

#+begin_src emacs-lisp
;; Delete trailing spaces and add new line in the end of a file on save.
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq require-final-newline t)

;; Expand-region allows to gradually expand selection inside words,
;; sentences, expressions, etc.
(use-package expand-region :ensure t)

;; Move-text lines around with meta-up/down.
(use-package move-text :ensure t)
#+end_src


*** wrap-region - Wrap text, surround text, surround quotes

Update <2021-04-25 Sun>: I found this package installed, but don't
remember I was using it, checked documentation and tried to use, but
without luck, so disabling it.

#+begin_example emacs-lisp
(use-package wrap-region :ensure t)
#+end_example

** Join lines
<2020-09-24 Thu>

Usually I just use =J= (=evil-join=), but if I need to wrap each line into quote,
this is the helper function.

#+begin_src emacs-lisp
(defun pp/arrayify (start end quote)
  "Join lines from START to END, surrounding each line with QUOTE.

Source: https://news.ycombinator.com/item?id=22131815"
  (interactive "r\nMQuote: ")
  (let ((insertion
         (mapconcat
          (lambda (x) (format "%s%s%s" quote x quote))
          (split-string (buffer-substring start end)) ", ")))
    (delete-region start end)
    (insert insertion)))
#+end_src

** Wrap lines on a screen, visual line mode

#+begin_example
(visual-line-mode 1)
#+end_example

* Dired (file management)                                             :Dired:

Links:
- [[https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf][Dired Reference Card]]
- [[https://www.ramitmittal.com/blog/15-days-in-dired/][15 Days in Dired as a file manager]]

#+begin_src emacs-lisp
(defun pp/dired-sidebar-view-file ()
  "Open file under cursor then switch back to dired-sidebar."
  (interactive)
  (dired-sidebar-find-file)
  (dired-sidebar-jump-to-sidebar))

(defun pp/dired-hook ()
  "Hook for `dired'."
  (all-the-icons-dired-mode)
  (unless (file-remote-p default-directory)
    (auto-revert-mode)))

(use-package dired-single :ensure t)

(use-package dired
  :init
  (put 'dired-find-alternate-file 'disabled nil)
  :config
  (setq dired-dwim-target t)
  :hook (dired-mode-hook . pp/dired-hook)
  :bind (:map dired-mode-map
              (("RET" . dired-single-buffer)
               ("DEL" . dired-single-up-directory)
               ("<tab>" . other-window)
               ("s" . evil-snipe-s)
               ("S" . evil-snipe-S))))

(use-package dired-sidebar :ensure t
  :commands dired-sidebar-toggle-sidebar)

(use-package all-the-icons-dired :ensure t
  :diminish)

;(use-package treemacs :ensure t)

(use-package dired-subtree :ensure t
  :bind (:map dired-mode-map
              (("i" . dired-subtree-insert)
               ("." . dired-subtree-remove))))


#+end_src

** DONE Don't select the first item when Dired' =R=
CLOSED: [2021-06-27 Sun 12:26]
<2021-06-26 Sat> <2021-06-27 Sun>

=dired-dwim-target= makes Dired to choose another Dired' window
current directory to be automatically selected. I suspect marginalia
or consult to select the first item. After reading what Consult is
doing (providing various helper functions) I conclude it's Selectrum'
responsibility to display selection list.

Let's take a look at Selectrum. Probably [[https://github.com/raxod502/prescient.el][prescient]] makes the first item
selected.

The ability to set the "copy to" or "rename/move to" name same as the
original name is already built in.

- Initiate the copy or move (rename) in dired
- =M-n= - That will give you the current file/dir name

- General tip that applies everywhere in Emacs: Whenever you are
  hunting for a default that you think should be present, try out =M-n=
  or =M-p=. =↓= runs the command (next-history-element), so does =M-n=.

The solution was found on Gihtub in Selectrum repository by searching for =dired-dwim-target=
on issue [[https://github.com/raxod502/selectrum/issues/323#issuecomment-776097349][selectrum#323]].

#+begin_src emacs-lisp
(defun selectrum-refine-candidates-using-completions-styles-with-dots (input candidates)
  "Use INPUT to filter and highlight CANDIDATES.
Uses `completion-styles'."
  (let ((cands (prescient-filter input candidates)))
    (if (and (eq (selectrum--get-meta 'category) 'file)
             (string-empty-p input))
        (cons "./" cands)
      cands)))

(setq selectrum-refine-candidates-function #'selectrum-refine-candidates-using-completions-styles-with-dots)

#+end_src


* Undo and redo
#+begin_src emacs-lisp
;; Linear undo and redo.
(use-package undo-tree :ensure t
  :diminish undo-tree-mode
  :init
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/tmp/undo"))
          undo-tree-auto-save-history nil
          undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff t
          undo-tree-limit 1000000)
    (setq-default undo-limit 1000000)))

#+end_src

* Visuals
#+begin_src emacs-lisp
(use-package highlight-indent-guides :ensure t
  :config
  (setq highlight-indent-guides-method 'character))

(global-hl-line-mode -1)

(use-package all-the-icons :ensure t)

(use-package rainbow-mode :ensure t)
#+end_src

* Mode line, mode-line, Status Bar
<2021-03-19 Fri> <2021-06-20 Sun>

[[http://ergoemacs.org/emacs/modernization_mode_line.html][Xah Lee's post on Mode line.]]

#+begin_src emacs-lisp
(use-package smart-mode-line :ensure t
  :config
  (setq sml/theme 'light
        ; sml/name-width 40
        ; sml/mode-width 'full
        sml/no-confirm-load-theme t
        ; sml/not-modified-char " "
        ; sml/numbers-separator ""
        sml/replacer-regexp-list '(("^~/Developer/src/github.com/FindHotel/" ":FH:")
                                   ("^~/Documents/Projects/Blog/" ":B:")
                                   ("^~/Documents/" ":Doc:")))
  (sml/setup))

;; (use-package mood-line
;;   :config
;;     (mood-line-mode 1))

;; (use-package doom-modeline
;;   :ensure t
;;   :init (doom-modeline-mode 1)
;;   :config
;;   (setq doom-modeline-minor-modes nil
;;         doom-modeline-height 0 ;; uses actual height of chars
;;         doom-modeline-bar-width 1
;;         doom-modeline-enable-word-count t
;;         doom-modeline-buffer-encoding nil))

;; (use-package ns-auto-titlebar
;;  :config
 ;;   (when (eq system-type 'darwin) (ns-auto-titlebar-mode)))

(setq-default echo-bell-background "Gray")
(load "echo-bell")
(echo-bell-mode)


(defun pp/hide-mode-line ()
  "Hide mode line for the current buffer.

See URL `https://www.emacswiki.org/emacs/HideModeLine'."
  (interactive)
  (setq mode-line-format nil))
#+end_src

#+begin_example emacs-lisp
(message mode-name)
(message mode-line-modes)
#+end_example

** Rich minority - disable minor-mode indicators in modeline

#+begin_src emacs-lisp
(use-package rich-minority :ensure t)

(setq rm-blacklist
        (format
         "^ \\(%s\\)$"
         (mapconcat
          #'identity
          '(
            "\\$"             ;; rich-minority itself
            "WE"
            "Ind"             ;; org-indent-mode
            "ElDoc"           ;; Emacs Lisp documentation
            "fix"             ;; eslintd-fix-mode
            "s3ed"
            "better-jumper"
            "be"              ;; beginend
            )
          "\\|")))
#+end_src

*** Cooperation with smart-mode-line
<2021-04-23 Fri>

I got this line in *Messages* during startup:

#+begin_quote
You don’t need to activate rich-minority-mode if you’re using smart-mode-line
#+end_quote

So, I will disable rich-minority package for now.

** mode-line resets when locally
For some reason mode-line turns to contain only buffer name
after some time, probably some package/mode sets it.
The example below resets it to default original value.

I was suspecting that this happens when I open a Go file, probably
something with go-mode-hook.

Can't reproduce on a fresh opened Emacs.

Now I suspect eglot.

#+begin_example emacs-lisp
(describe-variable 'mode-line-format)

(setq-default mode-line-format
  '("%e" mode-line-front-space
    mode-line-mule-info mode-line-client mode-line-modified
    mode-line-remote mode-line-frame-identification
    mode-line-buffer-identification " " mode-line-position
    evil-mode-line-tag (vc-mode vc-mode)
    "  " mode-line-modes mode-line-misc-info mode-line-end-spaces))
#+end_example

#+begin_src emacs-lisp
(defun pp/reset-mode-line-format ()
  "Klll local variable mode-line-format resetting it to the global value."
  (interactive)
  (kill-local-variable 'mode-line-format))

(defun pp/toggle-hide-mode-line ()
  "Toggle mode-line visibility in current buffer.
Source: https://gist.github.com/rnkn/a522429ed7e784ae091b8760f416ecf8"
  (interactive)
  (if mode-line-format
      (setq-local mode-line-format nil)
    (kill-local-variable 'mode-line-format)))
#+end_src

* Font                                                                 :Font:

#+begin_src emacs-lisp
(defun pp/set-font (font size)
  "Use FONT with SIZE if it's present in the system."
 (when (member font (font-family-list))
  (set-face-attribute 'default nil :font (format "%s %d" font size))))

;; (pp/set-font "JetBrains Mono" 12)
(pp/set-font "PragmataPro" 14)
;; (pp/set-font "Iosevka" 14)
#+end_src

* Color themes
#+begin_src emacs-lisp
(defun pp/disable-all-themes ()
  "Disable all custom enabled themes.
Found on http://www.greghendershott.com/2017/02/emacs-themes.html."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(defun pp/load-theme (theme)
  "Load THEME as current theme."
  (interactive "stheme: ")
  (pp/disable-all-themes)
  (load-theme theme t)
  (pp/set-font "PragmataPro" 14)
  ;(pp/set-font "Iosevka" 14)
)

(setq-default line-spacing 2)

;; (use-package ayu-theme :ensure t)
;; (use-package solarized-theme)
;; (use-package doom-themes)
;; (use-package ample-theme :ensure t)
;; (use-package quasi-monochrome-theme :ensure t)
;; (use-package monochrome-theme :ensure t)
(use-package modus-themes :ensure t)
(use-package faff-theme :ensure t)
;; (use-package horizon-theme :ensure t)

;; 256 colors in term
(use-package eterm-256color
  :hook (term-mode-hook . eterm-256color-mode))

(blink-cursor-mode 0) ;; disable blinking cursor
#+end_src

#+begin_example emacs-lisp
;; light themes
(pp/load-theme 'leuven)
(pp/load-theme 'tsdh-light)
(pp/load-theme 'monochrome-bright)
(progn
  (setq modus-operandi-theme-no-mixed-fonts t)
  (pp/load-theme 'modus-operandi))
(pp/load-theme 'whiteboard)

;; sepia themes
(pp/load-theme 'faff)

;; dark themes
(pp/load-theme 'ayu-dark)
(pp/load-theme 'wombat)
(pp/load-theme 'tsdh-dark)
(pp/load-theme 'ayu-grey)
(pp/load-theme 'monochrome)
(pp/load-theme 'quasi-monochrome)
(progn
  (setq modus-vivendi-theme-no-mixed-fonts t)
  (pp/load-theme 'modus-vivendi))
(pp/load-theme 'ample)
(pp/load-theme 'ample-flat)
#+end_example

#+begin_example emacs-lisp
(setq-default
 header-line-format
 (list
  "  "
  '(:eval (let ((name (buffer-name)))
            (cond ((not buffer-file-truename)
                   (propertize name 'face 'bold))
                  ((equal name (file-name-nondirectory buffer-file-truename))
                   (concat (propertize
                            (f-filename buffer-file-truename)
                            'face 'bold)
                           " "
                           (f-dirname buffer-file-truename)
                           "/…"))
                  (t
                   (concat (propertize name 'face 'bold)
                           " "
                           buffer-file-truename)))))

  ;; Right aligned
  '(:eval (let* ((right-text (format-mode-line mode-name)))
            (concat (propertize
                     " " 'display
                     `((space :align-to (- (+ right right-fringe right-margin)
                                           ,(+ 3 (string-width right-text))))))
                    right-text)))))
#+end_example

** Faff theme changed highlighting of Org headers

On [2020-11-26 Thu] in the commit [[https://github.com/WJCFerguson/emacs-faff-theme/commit/8bf375a218cb242fa6fad9804001f213bc2f9d56][8bf375a]] in faff theme the

** Switch between dark and light mode in macOS
<2020-12-12 Sat>

[[https://github.com/d12frosted/homebrew-emacs-plus#system-appearance-change][System appearance change]] in Emacs Plus.

=emacs-mac-port= does have this built-in
[[https://github.com/d12frosted/homebrew-emacs-plus][emacs-plus]] allows to add hook on changing system appearance

#+begin_src emacs-lisp
(defun pp/apply-appearance (appearance)
  "Load theme, taking current system APPEARANCE into consideration.

Works only in emacs-plus."
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (progn (setq modus-operandi-theme-no-mixed-fonts t)
                   (load-theme 'modus-operandi t)))
    ('dark (progn (setq modus-vivendi-theme-no-mixed-fonts t)
                   (load-theme 'modus-vivendi t))))
  (pp/set-font "PragmataPro" 14))

(add-hook 'ns-system-appearance-change-functions #'pp/apply-appearance)
#+end_src

#+begin_example emacs-lisp
(pp/apply-appearance 'dark)
(pp/apply-appearance 'light)
#+end_example

* Line numbers

#+begin_src emacs-lisp
(defun pp/line-numbers-on ()
  "Turn on showing line numbers."
  (interactive)
  (setq display-line-numbers 'relative))

(defun pp/line-numbers-off ()
  "Turn on showing line numbers."
  (interactive)
  (setq display-line-numbers nil))

(add-hook 'text-mode-hook #'pp/line-numbers-on)
(add-hook 'prog-mode-hook #'pp/line-numbers-on)
(add-hook 'org-mode-hook #'pp/line-numbers-off)
#+end_src

* Keybindings                                                   :Keybindings:

I found it works better if all the keybindings defined in a single
subtree instead of being configured in =use-package= import. The main
reason is that I can review them and find those I forget about and
either try using them or eventually remove entirely.

I use =general.el= package for managing keybindings.

- =C-h k= :: describe keybiding
- =C-h m= :: describe mode, contains keybindings defined by given major mode

#+begin_src emacs-lisp
;; Use ESC as universal get me out of here command
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))

(use-package which-key :ensure t
  :diminish which-key-mode
  :config
    (which-key-mode)
    (which-key-setup-side-window-bottom)
    ;;(which-key-setup-side-window-right-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
          which-key-idle-delay 0.5))

(use-package general :ensure t)

(general-define-key
 "§" 'other-window
 "s-s" 'save-buffer
 "s-S" 'write-file        ;; save as
 "s-a" 'mark-whole-buffer ;; select all
 "s-z" 'undo-tree-undo
 "s-Z" 'undo-tree-redo
 "s-;" 'comment-line
 "s-." 'company-complete

 ;; windows
 "s-q" 'ace-window
 "s-1" 'delete-other-windows
 "s-2" 'split-window-below
 "s-3" 'split-window-right
 "s-w" 'delete-window

 ;; going around
 "s-[" 'better-jumper-jump-backward
 "s-]" 'better-jumper-jump-forward
 "<s-backspace>" 'goto-last-change
 "s-j" 'previous-buffer
 "s-k" 'next-buffer
 "s-b" 'frog-jump-buffer
 "s-m" 'consult-mark
 "C-;" 'avy-goto-char
 "s-e" 'pp/open-in-eww

 ;; searching
 ; "C-s" 'isearch-forward   ;; this is the default
 "C-S-s" 'isearch-forward-symbol-at-point
 ; "C-r" 'isearch-backward  ;; this is the default
 "C-l" 'consult-line
 "s-l" 'pp/consult-line-symbol-at-point
 "s-r" 'consult-recent-file
 "s-o" 'pp/visit-or-open
 "s-p" 'project-find-file
 "s-f" 'pp/consult-ripgrep ;; fuzzy search in the current project
 "C-z" 'repeat   ;; https://www.reddit.com/r/emacs/comments/nlmff5/what_do_people_use_cz_for/

 "s-t" (pp/make-toggle-eshell)
 "s-g" 'magit-status

 ;"M-x" 'execute-extended-command ;; this is the default

 ;; function keys
 ; "<f1>" - standard Emacs keybinding for help subcommand
 "<f2>" 'dired-sidebar-toggle-sidebar
 "<f3>" 'ace-window
 "<f4>" (pp/make-toggle-scratch)

 "<f5>" 'deadgrep
 "<f6>" (lambda () (interactive) (push-mark))
 "<f7>" 'goto-last-change
 "<f8>" 'repeat

 "<f9>" 'execute-extended-command
 ;"<f10>" - standard macOS keybinding for opening top menu
 ;"<f11>" - standard macOS keybinding for showing Desktop, can't rebind it
 "<f12>" 'eval-last-sexp

 ;; text manipulation
 "s-'" 'er/expand-region
 "s-\\" 'er/contract-region
 "<M-up>" 'move-text-up
 "<M-down>" 'move-text-down)

(general-define-key
 :states '(normal)
 "C-k" 'evil-scroll-up
 "C-z" 'repeat
 "C-j" 'evil-scroll-down
 "C-f" 'deadgrep
 "C-r" 'isearch-backward)

(general-define-key :states '(normal) :prefix "SPC"
  "SPC" (pp/make-toggle-scratch)
  "[" 'flymake-goto-prev-error
  "]" 'flymake-goto-next-error
  "a" 'org-agenda
  "d" 'projectile-find-dir
  "f" 'fundamental-mode
  "n" 'deft ; mnemonics - notes
  "p" 'project-switch-project
  "t" 'projectile-test-project
  "v" 'visual-line-mode
  "w" 'widen
  ; "1" 'pp/switch-to-scratch-buffer
  ; "2" 'lispy-arglist-inline
  ; "," 'org-insert-structure-template   ;; never used it
  ; "k" 'kill-this-buffer   ;; use =C-x k= instead
  ; "e" (pp/make-toggle-eshell)   ;; use =s-t= instead
)

(general-define-key
 :states '(visual)
 :prefix "C-c"
 "t" 'go-translate-popup-current)

; https://www.reddit.com/r/emacs/comments/nlmff5/what_do_people_use_cz_for/gzmy6yl/
; Sequences consisting of C-c and a letter (either upper or lower
; case) are reserved for users; they are the only sequences reserved
; for users, so do not block them.
(general-define-key
 :prefix "C-c"
 "b" 'bury-buffer       ;; bury
 "l" 'lispy-mode        ;; lispy
 "f" 'deadgrep          ;; find
 "d" 'dired-jump        ;; dired in the current buffer directory
 "h" 'highlight-symbol  ;; highlight
)

(general-define-key
 :prefix "C-c"
 :keymaps 'org-mode-map
 "s" 'org-narrow-to-subtree
 "c" 'pp/org-created-today
 "u" 'pp/org-updated-today)

(general-define-key
 :prefix "C-x"
 "C-o" 'find-file
 "b" 'consult-buffer ; default 'switch-to-buffer
)

(general-define-key
 :states '(visual)
 "SPC" 'er/expand-region
 "DEL" 'er/contract-region)

(general-define-key
 :states '(insert)
 "C-a" 'beginning-of-line
 "C-e" 'end-of-line
 "C-n" 'next-line
 "C-p" 'previous-line)
#+end_src

** Commenting/uncommenting

- =M-;=, =comment-dwim= :: in Command mode will add comment to the end
  of line, in Visual mode will comment the whole line. =dwim= = do what I mean.
- =C-x C-;=, =s-;=, =comment-line= :: will comment the whole line, but
  works strange in Org Babel

Good description in http://ergoemacs.org/misc/emacs_comment-line_vs_comment-dwim.html.

** Key-chords
<2021-04-24 Sat>

Documentation is in the package source code.

Update <2021-04-25 Sun>: Alghout the package looks to be useful, I
started to see noticable lag while typing, so I disabled it and
configured F13-F15 keys for the initial commands I configured as
chords.

#+begin_example emacs-lisp
(use-package key-chord :ensure t :defer t
  :config
  (setq key-chord-two-keys-delay 0.06)
  (key-chord-define-global "jk" 'execute-extended-command)
  (key-chord-define-global "df" 'deadgrep)
  (key-chord-define-global "xe" 'eval-last-sexp)
  (key-chord-mode -1))
#+end_example

** DONE general.el - how to define keybidings for a mode?
CLOSED: [2021-06-19 Sat 13:14]
:PROPERTIES:
:CREATED:  <2021-06-19 Sat>
:END:

Use =:keymaps=:

#+begin_example emacs-lisp

(general-define-key
 :prefix "C-c"
 :keymaps 'org-mode-map
 "s" 'org-narrow-to-subtree
 "c" 'pp/org-created-today
 "u" 'pp/org-updated-today)
#+end_example


* Evil mode - vim keybindings                                          :Evil:
<2021-03-07 Sun>

Evil is a minor mode implementing semantic navigation mode, like in vim. Other notable semantic
modes are compared on [[https://github.com/jyp/boon][Boon's README]].

#+begin_src emacs-lisp
(use-package evil
  ;; :init (setq evil-want-C-u-scroll t)  ;; I'm using C-u as universal argument instead.
  :config
  (evil-set-undo-system 'undo-tree) ;; Evil made undo-tree optional, I'm setting it back here. Source: https://github.com/syl20bnr/spacemacs/issues/14036
  (evil-mode 1))

(use-package evil-surround :ensure t
  :config
  (global-evil-surround-mode 1))
#+end_src

Notable differences from vim:
- =C-u= is a universal argument in Emacs (changes the following
  command), in vim it's "scroll up a screen, PageUp". I bound =C-k= to
  =evil-scroll-up= for those purposes.

Links:
- [[https://wikemacs.org/index.php/Evil#Enter_an_emacs_mode_in_a_given_state][Enter an Emacs mode in a given state]]

* Window management
#+begin_src emacs-lisp
(setq
   split-height-threshold 80
   split-width-threshold 160)
#+end_src

* Project management                                                :Project:
<2021-06-15 Tue>

#+begin_src emacs-lisp
(use-package projectile :ensure t
  :config
    (setq projectile-git-submodule-command "")
    (setq projectile-mode-line-function '(lambda () (format " #%s" (projectile-project-name))))
    (projectile-mode +1))

(defun pp/project-try-explicit (dir)
  "Find a super-directory of DIR containing a root file."
  (locate-dominating-file dir ".project"))

(defmethod project-root ((project string))
  project)

(add-hook 'project-find-functions #'pp/project-try-explicit)
#+end_src

* Improving M-x (=execute-extended-command=)
#+begin_src emacs-lisp
(use-package smex :ensure t)
#+end_src

* Selectrum, Marginalia, Consult for completion
<2020-12-20 Sun> <2021-01-14 Thu>

Replaces Ivy+Counsel.

** Selectrum

https://github.com/raxod502/selectrum

Incremental narrowing in Emacs.

#+begin_src emacs-lisp
(use-package selectrum :ensure t
  :init (selectrum-mode))

(use-package selectrum-prescient :ensure t
  :init (selectrum-prescient-mode +1))

;; (use-package completing-read-xref
;;   :straight (completing-read-xref :type git :host github :repo "travitch/completing-read-xref.el")
;;   :commands (completing-read-xref-show-xrefs completing-read-xref-show-xrefs)
;;   :init (setq xref-show-definitions-function 'completing-read-xref-show-defs))
#+end_src

** Prescient - Frecency-based candidate sorting, also offers filtering

#+begin_src emacs-lisp
(use-package prescient :ensure t
  :config
  (prescient-persist-mode +1))
#+end_src

** Marginalia - additional information on completion
<2021-01-04 Mon>

Author - github/minad (the same author as for Consult and Affe
packages).

https://github.com/minad/marginalia

#+begin_src emacs-lisp
(use-package marginalia :ensure t
  :init
  (marginalia-mode)
  (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light)
        marginalia-truncate-width 300
        marginalia-separator-threshold 3000
        marginalia-margin-threshold 135))
#+end_src

*** TODO Fix wrong indentation in =M-x= when Emacs frame is full-screen on 27" display
<2021-01-13 Wed>

Can't make it working on both 27" display and on MacBook display.

#+begin_example emacs-lisp
(progn
  (marginalia-mode -1)
  (setq marginalia-truncate-width 300
        marginalia-separator-threshold 3000
        marginalia-margin-threshold 165)
  (marginalia-mode))
#+end_example

** Consult

https://github.com/minad/consult

Consult provides various practical commands based on the Emacs
completion function completing-read, which allows to quickly select an
item from a list of candidates with completion.

[[https://github.com/minad/consult/blob/923a34330207ed868b6388acf0f432ae989f1427/README.org#use-package-example][Example of extended configuration]] with many standard keybindings
rebinded to consult functions.

#+begin_src emacs-lisp
(use-package consult :ensure t
  :config
  (setq consult-preview-key (list (kbd "<down>")
                                  (kbd "<up>")
                                  (kbd "`")
                                  (kbd "\\"))
        consult-find-command "fd --color=never --full-path ARG OPTS"))

;(use-package icomplete-vertical :ensure t
;  :init (icomplete-vertical-mode))

(defun pp/consult-line-symbol-at-point ()
  "Start consult-line search with symbol at point"
  (interactive)
  (consult-line (thing-at-point 'symbol)))

(defun pp/consult-ripgrep ()
  "Launch ripgrep in the current project root."
  (interactive)
  (consult-ripgrep (project-root (project-current))))
#+end_src

*** DONE Consult is broken after upgrade
<2021-01-14 Thu>

- =consult-selectrum= is not longer exists, bundled inside consult,
  but it not symlinked when installing with straight.

#+begin_quote
Error in post-command-hook (selectrum--minibuffer-post-command-hook):
(wrong-type-argument number-or-marker-p nil)


Error in post-command-hook (icomplete-post-command-hook):
(wrong-type-argument number-or-marker-p nil)
#+end_quote

*** DONE Configure =consult-preview-key=
<2021-04-18 Sun>

* git                                                             :git:magit:

- =C-c C-a= :: when on a patch file, apply hunk at point

#+begin_src emacs-lisp
(use-package magit :ensure t
  :config
  (setq magit-diff-refine-hunk 't)
  :hook (magit-mode-hook . turn-off-evil-snipe-override-mode))

(use-package git-gutter :ensure t
  :diminish
  :init (global-git-gutter-mode 't)
  :config
    (custom-set-variables
      '(git-gutter:modified-sign "~") ;; two space
      '(git-gutter:added-sign "+")    ;; multiple character is OK
      '(git-gutter:deleted-sign "-"))
    (set-face-background 'git-gutter:modified "purple")   ;; background color
    (set-face-background 'git-gutter:added "green")
    (set-face-background 'git-gutter:deleted "red")
    (set-face-foreground 'git-gutter:added "white")
    (set-face-foreground 'git-gutter:deleted "white"))
#+end_src

** magit-todos - show TODO items from the repo
#+begin_src emacs-lisp
(use-package magit-todos :ensure t
  :config
  (setq magit-todos-exclude-globs '("*.map" "node_modules" "public"))
  (magit-todos-mode))
#+end_src

** Forge - interface that powers magit

#+begin_src emacs-lisp
(use-package forge :ensure t
  :after magit)

(use-package ghub :ensure t
  :after magit)
#+end_src

#+begin_example emacs-lisp
(forge-pull)
(ghub-request "GET" "/user")
#+end_example

* Code completion

[[https://emacs.stackexchange.com/questions/10837/how-to-make-company-mode-be-case-sensitive-on-plain-text][Preserve case in Company's suggestions]]

#+begin_src emacs-lisp
(use-package company :ensure t
  :diminish
  :config
  (setq company-dabbrev-downcase nil)
  :hook (prog-mode-hook . company-mode))
#+end_src

* Org-mode                                                          :OrgMode:
- [[https://www.gnu.org/software/emacs/refcards/pdf/orgcard.pdf][Org Reference Card]]
- [[https://orgmode.org/guide/Hyperlinks.html][Hyperlinks]]
- [[https://orgmode.org/manual/The-date_002ftime-prompt.html][Date and time prompts (by =C-c .=)]]

- =C-c .= :: open caledar to insert date
- =C-c C-l=, (org-insert-link) :: if on url - uses it and prompts for description. [[https://orgmode.org/manual/Handling-Links.html#Handling-Links][Docs]]
- =C-c C-o= :: Open link at point
- (org-clock-in), =C-c C-x TAB= :: Start timer for a given task
- (outline-hide-other) :: useful to fold all headings
- =C-u TAB= :: change folding globally

#+begin_example emacs-lisp
(describe-variable 'org-version)

(setq
   browse-url-browser-function 'browse-url-default-browser
   ;; browse-url-browser-function 'eww-browse-url
)
#+end_example


#+begin_src emacs-lisp
(use-package org
  :config
  (setq
   org-startup-indented t
   org-src-tab-acts-natively t
   org-src-preserve-indentation t
   org-src-fontify-natively t
   org-log-into-drawer t
   org-log-done 'time
   org-export-backends '(html md)
   org-support-shift-select t
   org-directory "~/Documents/Notes"
   org-agenda-files '("~/Documents/Notes/pavel.org"
                      "~/Documents/Projects/Blog/Pavels-Emacs-Configuration.org"
                      "~/Documents/Projects/Blog/All.org"
                      "~/Documents/FindHotel/fh.org")))

(use-package org-bullets :ensure t
  :hook (org-mode-hook . org-bullets-mode))
#+end_src

** Org-babel, Babel, Org Babel                                    :OrgBabel:
<2020-11-23 Mon> <2020-12-06 Sun>

Babel enables literate programming in Org Mode.

- =<s-TAB= :: start source block
- =<e-TAB= :: start example block
- =C-c C-c= :: execute block
- =C-c '= :: edit this block in a separate buffer

The =noweb= feature of babel allows us to expand references to other code blocks within a code block.

#+begin_src emacs-lisp
(setq-default org-confirm-babel-evaluate nil)
(setq org-babel-python-command "python3")
(use-package ob-restclient :ensure t) ;; support restclient in org-babel

(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (calc . t)
   (clojure . t)
   (emacs-lisp . t)
   (ledger . t)
   (plantuml . t)
   (python . t)
   (restclient . t)
   (shell . t)
))
#+end_src

*** Setup org-mode-babel for sql files
- Should be able to run SQL in Snowflake
- Well, at least formatting

*** DONE Setup org-mode-babel for shell
CLOSED: [2020-09-21 Mon 23:02]

#+begin_src sh
ls ~
#+end_src

#+RESULTS:
| Applications  |
| Desktop       |
| DockerDesktop |
| Documents     |
| Downloads     |
| Library       |
| Movies        |
| Music         |
| Pictures      |
| Projects      |
| Public        |
| fh            |
| go            |
| repos         |

*** Setup org-mode-babel for clojure

#+begin_src clojure
(+ 2 3)

(defn foo [x] x)
#+end_src

*** Example blocks

#+begin_src shell :eval yes :results verbatim :cache yes
printf "Please wait (this can take a while)...\n"
sleep 5
printf "Done!\n"
#+end_src

#+RESULTS:
: Please wait (this can take a while)...
: Done!

*** TODO Try ob-async
Asynchronous src_block execution for org-babel
https://github.com/astahlman/ob-async

*** How to insert source code block?
<2020-01-24 Fri>

https://emacs.stackexchange.com/a/19946

- In Org Mode prior to 9.2 :: Insert =<s= and press =TAB=
- After 9.2 :: =C-c C-,=

After upgrading to Emacs 27.1 =<s= and =<e= expansions stopped
working, the new shortcut is =C-c C-,= To get =<s= and =<e= working,
[[https://emacs.stackexchange.com/a/46992][this answer]] on SO suggests using the following snippet.

#+begin_src emacs-lisp
(require 'org-tempo)
; (add-to-list 'org-modules 'org-tempo)
#+end_src

but for some reason it didn't work for me, so I stick with =C-c C-,=
and also bind it to =SPC ,= in Evil Normal mode. As of
[2020-11-23 Mon] =<s= works again.

** Priorities
Mapping of Org priorities to Eisenhauer Matrix:
|               | Urgent | Not Urgent |
|---------------+--------+------------|
| Important     | #A     | #B         |
| Not Important |        | #C         |


By default, Org mode supports three priorities: ‘A’, ‘B’, and ‘C’. ‘A’
is the highest priority. An entry without a cookie is treated as
equivalent if it had priority ‘B’. Priorities make a difference only
for sorting in the agenda (see Weekly/daily agenda).

[[https://orgmode.org/manual/Priorities.html][Priorities]]

** Org-agenda, Ora Agenda                                        :OrgAgenda:
:PROPERTIES:
:CATEGORY: til
:CREATED:  [2020-10-05 Mon 09:38]
:END:
<2020-10-05 Mon>

To setup category either add =#+CATEGORY= to the file or use
=CATEGORY= property of an item. To setup a property use
=org-set-property=.
*** DONE How to split agenda vertically?
CLOSED: [2020-01-24 Fri 14:04]
:LOGBOOK:
- State "DONE"       from              [2020-01-24 Fri 14:04]
:END:
<2020-01-24 Fri>

There is such configuration from Castlemacs which did that damage:
#+begin_example elisp
;; This is rather radical, but saves from a lot of pain in the ass.
;; When split is automatic, always split windows vertically
(setq split-height-threshold 0)
(setq split-width-threshold nil)
#+end_example

https://emacs.stackexchange.com/questions/39034/prefer-vertical-splits-over-horizontal-ones
https://www.gnu.org/software/emacs/manual/html_node/eintr/See-variable-current-value.html

*** TODO u/alphapapa published org-super-agenda package to bring it to the next level
<2020-11-22 Sun>
https://github.com/alphapapa/org-super-agenda
https://www.reddit.com/r/emacs/comments/jy87i3/ann_orgsuperagenda_12_released/

*** TODO Write a function to add current buffer to org-agenda-files


** Org-table
<2021-03-09 Tue>

- =C-c |=, =(org-table-create-or-convert-from-region)= :: copy-paste
  HTML table, insert and run this to convert to Org table

** org-make-toc - create Table of Contents
<2021-03-09 Tue>

#+begin_src emacs-lisp
(use-package org-make-toc :ensure t
  :hook (org-mode-hook . org-make-toc-mode))
#+end_src

** TODO [#C] Check Org-QL, a query language for Org files            :OrgQL:
https://github.com/alphapapa/org-ql

** DONE How to automatically add creation metadata timestamp to Org-mode entry?
CLOSED: [2020-09-24 Thu 09:51]
:PROPERTIES:
:CREATED:  [2020-09-24 Thu 09:50]
:END:
<2020-09-24 Thu>

Links:
- https://orgmode.org/manual/Creating-Timestamps.html
- https://stackoverflow.com/questions/12262220/add-created-date-property-to-todos-in-org-mode

Use =org-expiry-insert-created= function.

#+begin_example emacs-lisp
(load "org-expiry")
(setq
  org-expiry-created-property-name "CREATED" ; Name of property when an item is created
  org-expiry-inactive-timestamps   t         ; Don't have everything in the agenda view
)
#+end_example

** DONE Saving of fh.org (272K) takes significant time
CLOSED: [2020-11-13 Fri 23:25]
<2020-11-01 Sun>

The problem was in =undo-tree= mode which overtime grew significant
amount of undo changes.

** Full-width inline displaying images
<2021-03-01 Mon>

When I enable inline images using =M-x org-toggle-inline-images=, they
often are very wide and go beyond the width of the buffer. How to make
them fit to the width of the buffer?

#+begin_src emacs-lisp
(setq-default org-image-actual-width 720) ; half of MacBook's 1440 width
#+end_src

** Multi-line strings in tables
<2021-05-23 Sun>

** DONE Find out how to efficiently insert CREATED/UPDATED properties
CLOSED: [2021-06-19 Sat 12:45]
:PROPERTIES:
:UPDATED:  <2021-06-19 Sat>
:END:

- [x] Write an elisp function?

- [[https://emacs.stackexchange.com/questions/7250/in-org-mode-how-to-insert-timestamp-with-todays-date][Related SO question]]

- [ ] Maybe create a shortcut in Org-mode? How to?
  Need shortcuts for an org-mode, probably using =C-c <char>=

#+begin_src emacs-lisp
(defun pp/org-created-today ()
  "Set CREATED property to the current subtree to today."
  (interactive)
  (org-set-property
   "CREATED"
   (format-time-string
    (org-time-stamp-format) (current-time))))

(defun pp/org-updated-today ()
  "Set UPDATED property to the current subtree to today."
  (interactive)
  (org-set-property
   "UPDATED"
   (format-time-string
    (org-time-stamp-format) (current-time))))
#+end_src


** TODO What's the meaning of bracked ratios? Like [4/23]         :Learning:
:PROPERTIES:
:CREATED:  <2021-06-19 Sat>
:END:

https://orgmode.org/worg/org-tutorials/org4beginners.html


** TODO Learn the recommended way to use tags
:PROPERTIES:
:CREATED:  <2021-06-19 Sat>
:END:

https://orgmode.org/worg/org-tutorials/org4beginners.html

Tags are supposed to support GTD flow, probably I'm using them wrong
all the way.

- =C-c C-c= :: add tag

* Outline-mode - folding and unfolding in Org-mode style

#+begin_src emacs-lisp

;; (use-package outshine :ensure t) - way too complex

;; (use-package outline-magic :ensure t) - use org-cycle instead
;;  :config (setq-default outline-promotion-headings '("# * " "# ** " "# *** ")))

(setq-default outline-regexp "[*#]+")

(use-package emacs
  :config
  (defun pp/outline-minor-mode-hook ()
    (general-define-key
     :keymaps 'local
     "<tab>" 'org-cycle
     "M-p" 'outline-previous-heading
     "M-n" 'outline-next-heading))
  (add-hook 'outline-minor-mode-hook #'pp/outline-minor-mode-hook))
#+end_src

#+begin_example emacs-lisp
(describe-variable 'outline-promotion-headings)
#+end_example

* Eshell                                                             :Eshell:

*Links*
- [[https://ambrevar.xyz/emacs-eshell/][Eshell as a main shell]]
- [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][Mastering Eshell]]

#+begin_src emacs-lisp

(defun pp/eshell-prompt-function ()
  "Eshell prompt function."
  (format "%s\nλ " (abbreviate-file-name (eshell/pwd))))

(use-package eshell
  :config
  (setq-default eshell-history-size 100000
                eshell-prompt-regexp "^λ "
                eshell-prompt-function #'pp/eshell-prompt-function))

(defun pp/eshell-mode-hook ()
  "Eshell mode hook."
  (require 'eshell-z))

(use-package eshell-z :ensure t
  :hook (eshell-mode-hook . pp/eshell-mode-hook))

(defun pp/eshell-new ()
  "Open a new instance of eshell."
  (interactive)
  (eshell 'N))

(defalias 'ff 'find-file)
(defalias 'ffo 'find-file-other-window)
#+end_src

#+begin_example emacs-lisp

;; syntax highlighting slows down eshell, so I don't use it anymore
(use-package eshell-syntax-highlighting :ensure t
  :after esh-mode
  :config
  ;; Disable in all Eshell buffers by default.
  (eshell-syntax-highlighting-global-mode -1))

  (eshell-syntax-highlighting-global-mode -1)

  (eshell-syntax-highlighting-global-mode +1)
#+end_example

** How to open a file in emacs?

#+begin_src sh
find-file filename # => (find-file "filename")
#+end_src

** Setting environment variables

#+begin_src emacs-lisp
(setenv "SNOWSQL_ACCOUNT" "some-value.eu-west-1")
#+end_src

** DONE How to redirect command output to a buffer?
CLOSED: [2021-06-20 Sun 11:26]

Link:
- [[https://www.emacswiki.org/emacs/EshellRedirection][Eshell Redirection]]

It's like this:

#+begin_src sh
date > #<buffer *scratch*>
#+end_src


* restclient, major mode for sending HTTP requests
Although now I try to use Babashka instead.

Another alternative - Elisp package https://github.com/tkf/emacs-request.

#+begin_src emacs-lisp
(use-package restclient :ensure t
  :mode (("\\.http\\'" . restclient-mode)))


;(load "restclient-jq") - haven't manage to make it working, using Clojure instead for dealing with JSON
#+end_src

* AnyBar, show circle indicator in macOS menu
#+begin_example emacs-lisp
(use-package anybar :ensure t)
#+end_example

* DeadGrep - Searching in multiple files / project             :ack:rg:deadgrep:

grep / ripgrep / ag / ack / pt

- =M-n=, =M-p= :: move to next/previous file
- =n=, =C-n=, =C-p= :: move to next/previous line
- =g= :: refresh search
- =o= :: open matched file on matched line
- =v= :: view matched file on matched line (keeping focus in Deadgrep buffer)

#+begin_src emacs-lisp
(defun pp/deadgrep-view-file ()
  "View result under cursor in other window."
  (interactive)
  (deadgrep-visit-result-other-window)
  (other-window 1))

(use-package deadgrep :ensure t
  :config
  (setq deadgrep-executable "rg")
  :bind (:map deadgrep-mode-map
              ("v" . pp/deadgrep-view-file)))
;; TODO: maybe setup next-error-follow-minor-mode as a hook?



#+end_src

** TODO Figure out why =rg= produces no results in Babel, but =ack= works fine
:PROPERTIES:
:CREATED:  <2021-06-06 Sun>
:END:

** DONE Make sorting by filename
CLOSED: [2021-06-06 Sun 12:46]
<2021-06-06 Sun>

#+begin_src emacs-lisp
(defun deadgrep--arguments (search-term search-type case context)
  "Return a list of command line arguments that we can execute in a shell
to obtain ripgrep results."
  (let (args)
    (push "--sort=path" args)  ; this line is added to original code
    (push "--color=ansi" args)
    (push "--line-number" args)
    (push "--no-heading" args)
    (push "--no-column" args)
    (push "--with-filename" args)

    (cond
     ((eq search-type 'string)
      (push "--fixed-strings" args))
     ((eq search-type 'words)
      (push "--fixed-strings" args)
      (push "--word-regexp" args))
     ((eq search-type 'regexp))
     (t
      (error "Unknown search type: %s" search-type)))

    (cond
     ((eq case 'smart)
      (push "--smart-case" args))
     ((eq case 'sensitive)
      (push "--case-sensitive" args))
     ((eq case 'ignore)
      (push "--ignore-case" args))
     (t
      (error "Unknown case: %s" case)))

    (cond
     ((eq deadgrep--file-type 'all))
     ((eq (car-safe deadgrep--file-type) 'type)
      (push (format "--type=%s" (cdr deadgrep--file-type)) args))
     ((eq (car-safe deadgrep--file-type) 'glob)
      (push (format "--type-add=custom:%s" (cdr deadgrep--file-type)) args)
      (push "--type=custom" args))
     (t
      (error "Unknown file-type: %S" deadgrep--file-type)))

    (when context
      (push (format "--before-context=%s" (car context)) args)
      (push (format "--after-context=%s" (cdr context)) args))

    (push "--" args)
    (push search-term args)
    (push "." args)

    (nreverse args)))

#+end_src

* Formatting code
<2021-03-22 Mon>

#+begin_src emacs-lisp
(use-package format-all :ensure t)
#+end_src

** Built-in keybindings for working with S-expressions   :lisp:
<2021-04-25 Sun>
- =C-M-f=, (forward-sexp) :: forward
- =C-M-b=, (backward-sexp) :: backward
- =C-M-n=, (forward-list) :: next
- =C-M-p=, (backward-list) :: previous
- =C-M-u=, (backward-up-list) :: up
- =C-M-d=, (down-list) :: down
- =C-M-k=, (kill-sexp) :: kill balanced expression forward
- =C-M-SPC=, (mark-sexp) :: Put the mark at the end of the sexp
- =C-M-e=, (end-of-defun) :: End of defun - go to the next line of current top-level sexp
- =C-M-a=, (beginning-of-defun) :: Beginning of defun - go to the beginning of the first line of current top-level sexp

** Lispy - working with lisp s-expressions   :lisp:
Useful keybindings in Lispy:
- =S=, =lispy-stringify= :: turn s-expr to string, useful fur turning JSON to string
- =C-u "=, =lispy-quotes= :: when inside quote string - unquote

- =[=, =]= :: goto previous/next parenthesis

- =C-8= :: lispy-parens-down

- =C-2=, =SPC-2=, =lispy-arglist-inline= :: C-2 doesn't work, so I bound it to =SPC-2=

- =G=, =special-lispy-goto-local= :: go to local def
- =M-.= :: go to symbol definition

- =d= :: go to other side of sexp

- =C-,= :: lispy-kill-at-point
- =m= :: mark current sexp, alternative to evil's =%=

Avy-based movements, work in a current sexp
- =a= :: starts avy to go to symbol and mark it
- =H= :: starts avy to replace symbol

[[https://github.com/r-darwish/.emacs.site.d/blob/8e565d29b50724dbe9cf973f4acd2faf526bccc5/config.el#L26][Example configuration with keybindings.]]

#+begin_src emacs-lisp
(defun pp/lispy-mode-hook ()
  "Turn on lispy, turn off evil-mode locally."
  (interactive)
  (lispy-mode 1))

(use-package lispy :ensure t
  :hook ((emacs-lisp-mode-hook . pp/lispy-mode-hook)
         (clojure-mode-hook . pp/lispy-mode-hook))
  :config (setq lispy-compat '(edebug cider)))
#+end_src
** Dealing with pairs - smartparens
Turning off smartparens to not interact with lispy.

#+begin_src emacs-lisp

;;(use-package smartparens :ensure t
;;  :diminish
;;  :config
;;    (smartparens-global-mode))

;; smartparens
;; "<s-down>" 'sp-down-sexp
;; "<s-up>" 'sp-up-sexp

#+end_src

** TODO Setup sql formatting

Mandatory:
- =format-all-buffer= should be able to invoke it
- Need to process multiple SQL statements in a file
- Static binary (go?), so no python dependencies
- Good defaults

Nice to have:
- Should understand templating (highly unlekely)

* Colors in compilation buffers
#+begin_src emacs-lisp

(add-hook 'compilation-mode-hook 'ansi-color-for-comint-mode-on)
(add-to-list 'comint-output-filter-functions 'ansi-color-process-output)

(defun pp/colorize-buffer ()
  "Replace ANSI color sequences with actual colors in current buffer.
Source: https://lists.gnu.org/archive/html/help-gnu-emacs/2013-10/msg00229.html"
  (interactive)
  (read-only-mode -1)
  (ansi-color-apply-on-region (point-min) (point-max))
  (read-only-mode +1))

(add-hook 'compilation-filter-hook 'pp/colorize-buffer)


#+end_src

* Language Server Protocol, LSP
#+begin_src emacs-lisp
(use-package eglot :ensure t :commands eglot)

(use-package dumb-jump :ensure t)  ;; go to definition
#+end_src

* Error checking
Two main packages providing minor mode for error checks:

- flymake :: built-in into Emacs
- flycheck :: competitor that gained lots of popularity recently

** Flymake

I found this configuration in [[https://github.com/turbo-cafe/flymake-kondor][flymake-kondor]]'s README:
#+begin_src emacs-lisp
(use-package flymake
  :hook (prog-mode . (lambda () (flymake-mode t)))
  :config (remove-hook 'flymake-diagnostic-functions #'flymake-proc-legacy-flymake))
#+end_src

** Flycheck
#+begin_src emacs-lisp
;;(use-package flycheck
;;  :init (global-flycheck-mode))
;; (use-package flymake-easy)
#+end_src

* Elisp                                                               :Elisp:lisp:
:PROPERTIES:
:UPDATED:  <2021-06-19 Sat>
:END:

- [[http://ergoemacs.org/emacs/inline_doc.html][Doc String Markup]]

#+begin_src emacs-lisp
(use-package rainbow-delimiters :ensure t
 ; :hook (prog-mode-hook . rainbow-delimiters-mode)
)

(show-paren-mode)

(use-package elisp-format :commands elisp-format-region)

(use-package paredit :ensure t
  :diminish)

(add-hook 'emacs-lisp-mode-hook 'flymake-mode)

#+end_src

- Libraries for programming :: https://github.com/emacs-tw/awesome-emacs#programming

** Dash - A modern list api for Emacs
https://github.com/magnars/dash.el

#+begin_src emacs-lisp
(use-package dash :ensure t)
#+end_src

#+begin_example emacs-lisp
(-map (lambda (n) (* n n)) '(1 2 3 4))
#+end_example

** S - working with strings
https://github.com/magnars/s.el

#+begin_src emacs-lisp
(use-package s :ensure t)
#+end_src

#+begin_example emacs-lisp
(s-join "," '("asdf" "qwer" "fdsa"))

(s-split-words "fooBar")
#+end_example

** HT - working with HashTables
<2021-01-05 Tue>


#+begin_src emacs-lisp
(use-package ht :ensure t)
#+end_src

#+begin_example emacs-lisp
(let ((example (ht ("Foo" "Bar")
                   ("a" "b"))))
  (s-join "&" (-map (lambda (kv) (s-join "=" kv))
                    (ht-items example))))
#+end_example

** Example using Elisp
<2021-01-05 Tue>

#+begin_example emacs-lisp

(json-encode
 (list :requests
  (let ((params (list (ht ("hitsPerPage" "1")
                            ("filters" "origin:IND AND anchorId:place-432123"))
                        (ht ("hitsPerPage" "1")
                            ("filters" "visitorId:pavel"))
                        (ht ("hitsPerPage" "1")
                            ("filters" "userAgent:googlebot"))))
        (req (lambda (p)
               (ht (:indexName "prod_banapi_v1")
                   (:params (url-hexify-string
                             (s-join "&" (-map (lambda (kv) (s-join "=" kv))
                                               (ht-items p)))))))))
    (-map req params))))


(object :foo :bar)

(json-encode (ht (:hitsPerPage "1")
                 (:filters "userAgent:googlebot")))


(json-serialize '(:foo 1 :qwer 2))

(json-encode '(:requests (list 1 2 3 4)))

(json-encode '(:requests (list ) :foo :bar (3 4)))


(let* ((plus-one (lambda (n) (+ n 1)))
       (plus-two (lambda (x) (funcall plus-one (funcall plus-one x)))))
  (funcall plus-two 3))


(lexical-let*
    ((plus-one (lambda (n) (+ n 1)))
     (plus-two (lambda (x) (plus-one (plus-one x)))))
  (plus-two 3))


(let* ((y 1)
      (z y))
  (list y z))


(json-encode
 (list :requests
  (let ((params (list (ht (:hitsPerPage "1")
                          (:filters "origin:IND AND anchorId:hotel-12346"))
                      (ht (:hitsPerPage "1")
                          (:filters "visitorId:pasha"))))
        (req (lambda (p)
               (ht (:indexName "prod_banapi_v1")
                   (:params (url-encode-url
                             (s-join "&" (-map (lambda (kv) (s-join "=" kv))
                                               (ht-items p)))))))))
    (-map req params))))


(ht (:foo :bar)
    (:fo1 :bar)
    (:fo2 :bar)
    (:fo3 :bar))


#+end_example

* Go programming language, Golang
#+begin_src emacs-lisp
(defun pp/go-mode-hook ()
  "Hook for 'go-mode'."
  (add-hook 'before-save-hook 'gofmt-before-save)
  (setq
     tab-width 4
     indent-tabs-mode 1)
  ;; (flymake-mode)
  (general-define-key
     :states '(normal)
     :prefix "g"
     "d" 'xref-find-definitions
     "h" 'godoc-at-point))

(use-package go-mode
  :config
  (setq-default
    gofmt-command "goimports"
    ;; gofmt-args (list "-s")
    )
  :hook (go-mode-hook . pp/go-mode-hook))

(use-package gotest :ensure t
  :config
  (setq-default go-test-args "-timeout 30s"))
#+end_src

** DONE Fix "variable binding depth exceeds max-specpdl-size" error
<2021-04-16 Fri> <2021-04-17 Sat>

[[https://www.reddit.com/r/emacs/comments/9jp9zt/anyone_know_what_variable_binding_depth_exceeds/][Discussion on Reddit]]

As I know, its gopls returning a huge list of vendored path when
importing a big package (like AWS SDK or Google Cloud SDK).

#+begin_src emacs-lisp
(setq max-specpdl-size 16000) ; after setting to 13000 eglot starts lagging
#+end_src

** Eglot throws to *Messages* that Diagnostics contains extra fields
<2021-04-17 Sat>

[[https://github.com/joaotavora/eglot/issues/628][Issue eglot#628 on Github]]

I added manually :codeDescription and :tags, recompiled file, then it was gone.

#+begin_example diff
-(Diagnostic (:range :message) (:severity :code :source :relatedInformation))
+(Diagnostic (:range :message) (:severity :code :source :relatedInformation :codeDescription :tags))
#+end_example

* Terraform

Since somewhere in November 2020 resource names started showing in
pink, which I can't distinguish on any background, so I change it to
be the same as resource type.

#+begin_src emacs-lisp
(use-package terraform-mode :ensure t
  :config (setq terraform--resource-name-face 'terraform--resource-type-face)
  :hook (terraform-mode-hook . terraform-format-on-save-mode))
#+end_src

* Makefile

#+begin_src emacs-lisp
(use-package emacs
  :config
  (defun pp/makefile-mode-hook ()
    "Hook for Makefiles."
    (setq tab-width 4))

  :hook
  (makefile-mode-hook . pp/makefile-mode-hook))
#+end_src

* JSON
#+begin_src emacs-lisp
(defun pp/json-mode-hook ()
  (setq
     tab-width 2
     js-indent-level 2
     indent-tabs-mode nil))

(use-package json-mode :ensure t
  :hook (json-mode-hook . pp/json-mode-hook))
#+end_src

Related:
- https://github.com/p-baleine/jq.el

** Validating if JSON is valid
<2021-01-12 Tue>

#+begin_src emacs-lisp
(defun pp/selection-valid-json? (beg end)
  "Validates selection from BEG to END to be a valid JSON."
  (interactive "r")
  (json-read-from-string (buffer-substring-no-properties beg end)))
#+end_src

#+begin_example emacs-lisp
(json-read-from-string "{\"a\": 1}")
#+end_example
** TODO Try json-pointer
<2021-01-05 Tue>
https://github.com/syohex/emacs-json-pointer

* YAML
#+begin_src emacs-lisp
(use-package yaml-mode :ensure t)
#+end_src

* Ledger, double-entry plain text accounting system
<2021-04-18 Sun>
#+begin_src emacs-lisp
(use-package ledger-mode :ensure t)
#+end_src

Manual to use ledger from Org-mode.

#+name balance-in-eur
#+begin_src ledger :cmdline -s -f ~/Documents/Notes/ledger.txt bal Assets Liabilities -X EUR --depth 2
; comment
#+end_src

* Clojure                                                           :Clojure:

#+begin_src emacs-lisp
(use-package clojure-mode :ensure t
  :config
  (setq clojure-align-forms-automatically t))

(require 'ob-clojure) ;; enable clojure in org-babel
#+end_src

** How to develop in Clojure (CIDER)

CIDER Docs: https://docs.cider.mx/cider/index.html

- =cider-eval-defun-at-point= (=C-c C-c=) :: on S-exp will evaluate
  outer S-exp, both in Evil Normal and Insert modes

- =cider-eval-last-sexp= (=C-c C-e=) :: having cursor after S-exp will
  evaluate previous one, sometimes doesn't work as expected in Evil
  Normal mode, use Insert mode instead

- =cider-clojuredocs= (=C-c C-d C-c=) :: open documentation from
  ClojureDocs. Default search term is that under cursor


Keybindings in Inspector:

- =l= :: go to previous page
- =RET= :: inspect
- =TAB= :: go to next inspectable item
- =S-TAB= :: go to previous inspectable item

#+begin_src emacs-lisp
(use-package cider :ensure t)
#+end_src
** Using Reveal with CIDER
<2021-06-08 Tue>

vlaaad.reveal.nrepl/middleware

#+begin_src sh
/opt/homebrew/bin/clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version "0.8.3"} cider/cider-nrepl {:mvn/version "0.26.0"}} :aliases {:cider/nrepl {:main-opts ["-m" "nrepl.cmdline" "--middleware" "[vlaaad.reveal.nrepl/middleware cider.nrepl/cider-middleware]"]}}}' -M:cider/nrepl
#+end_src


** inf-clojure
https://github.com/clojure-emacs/inf-clojure

#+begin_src emacs-lisp
(use-package inf-clojure :ensure t)
#+end_src

** Useful helper functions
#+begin_src clojure
;; change current namespace
(in-ns 'hello.cruel-world)

(filter #(clojure.string/includes? % "json")
        (map str (all-ns)))

(filter #(and
          (not (clojure.string/includes? % "cider"))
          (not (clojure.string/includes? % "nrepl"))
          (not (clojure.string/includes? % "clojure")))
        (map str (all-ns)))

(filter #(complement (or (map
clojure.string/includes? ["cider" "nrepl" "clojure"]))
        (map str (all-ns)))
#+end_src

** Linter - clj-kondo

#+begin_src emacs-lisp
(use-package flymake-quickdef :ensure t)

(use-package flymake-kondor :ensure t
  :hook (clojure-mode-hook . flymake-kondor-setup))
#+end_src

#+begin_example emacs-lisp
(executable-find "clj-kondo")
#+end_example

** ClojureScript
*** TODO Try re-jump for re-frame
https://github.com/oliyh/re-jump.el/blob/master/re-jump.el

** 4Clojure
<2020-09-23 Wed> <2020-11-28 Sat>

#+begin_src emacs-lisp
(use-package 4clojure :ensure t)

(defun endless/4clojure-check-and-proceed ()
  "Check the answer and show the next question if it worked."
  (interactive)
  (unless
      (save-excursion
        ;; Find last sexp (the answer).
        (goto-char (point-max))
        (forward-sexp -1)
        ;; Check the answer.
        (cl-letf ((answer
                   (buffer-substring (point) (point-max)))
                  ;; Preserve buffer contents, in case you failed.
                  ((buffer-string)))
          (goto-char (point-min))
          (while (search-forward "__" nil t)
            (replace-match answer))
          (string-match "failed." (4clojure-check-answers))))
    (4clojure-next-question)))
#+end_src

* JavaScript

#+begin_src emacs-lisp
(defun pp/js-mode-hook ()
  "Hook for 'js-mode'."
  (setq
     tab-width 2
     indent-tabs-mode nil)
  (flymake-mode))

(use-package js-mode
  :hook (js-mode-hook . pp/js-mode-hook)
  :config
  (setq js-indent-level 2))
#+end_src

* TypeScript
#+begin_src emacs-lisp
(use-package typescript-mode :ensure t
  :config
  (setq typescript-indent-level 2))

(use-package tide :ensure t
  :config
  (setq tide-format-options
        (list :insertSpaceAfterFunctionKeywordForAnonymousFunctions t
              :placeOpenBraceOnNewLineForFunctions nil)))
#+end_src

* Scala
#+begin_src emacs-lisp
(defun pp/scala-mode-hook ()
  "Hook for 'scala-mode'."
  (general-define-key :states '(normal) :prefix "g"
    "h" 'eglot-help-at-point))

(use-package scala-mode :ensure t
  :mode "\\.s\\(cala\\|bt\\)$"
  :hook (scala-mode-hook . pp/scala-mode-hook))

;; Enable sbt mode for executing sbt commands
(use-package sbt-mode
  :commands (sbt-start sbt-command)
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map)
   ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
   (setq sbt:program-options '("-Dsbt.supershell=false")))
#+end_src

* Highlighting
#+begin_src emacs-lisp

(defun pp/highlight-symbol-hook ()
  "Hook for highlighting symbols."
  (highlight-symbol-nav-mode)
  (highlight-symbol "TODO:")
  (highlight-symbol "FIXME:"))

(use-package highlight-symbol :ensure t
  :hook ((prog-mode-hook . pp/highlight-symbol-hook)
         (text-mode-hook . pp/highlight-symbol-hook)
         (org-mode-hook . pp/highlight-symbol-hook))
  :config
  (setq
     highlight-symbol-colors
       (quote
         ("light goldenrod" "deep sky blue" "light coral" "chocolate" "orange" "red" "orange red"))
     highlight-symbol-foreground-color "black"))
#+end_src

** Color identifiers mode
Don't remember what's this.

#+begin_example emacs-lisp
(use-package color-identifiers-mode :ensure t)
#+end_example

* Random helper functions
#+begin_src emacs-lisp
(defun pp/switch-to-scratch-buffer ()
  "Switch to *scratch* buffer."
  (interactive)
  (switch-to-buffer "*scratch*"))
#+end_src

* Network utilities in Emacs

#+begin_example emacs-lisp

(telnet "ya.ru" 80)

(ping "ya.ru")

(telnet "inbucket.nyancat.gcp.in-gr.ru" 443)

#+end_example

* Open browser from Emacs

#+begin_example emacs-lisp
(start-process "" nil "open" "http://clojure.org")

(xwidget-webkit-browse-url "http://clojure.org")
#+end_example

* Blogging
:LOGBOOK:
CLOCK: [2021-04-19 Mon 12:32]--[2021-04-19 Mon 13:52] =>  1:20
:END:
<2020-09-27 Sun>

How to run a blog from Emacs with minimum overhead efforts.

Options I considered:

** Weblorg - A Static HTML Generator for Emacs and Org-Mode
<2021-02-07 Sun> <2021-06-13 Sun>

- [[https://www.reddit.com/r/emacs/comments/l9ohho/weblorg_a_static_html_generator_for_emacs_orgmode/][Announcement on Reddit]]
- Website :: [[https://emacs.love/weblorg/][emacs.love/weblorg]]

#+begin_src emacs-lisp
(use-package weblorg :ensure t)
#+end_src

** LazyBlorg - Python-powered opinionated site generator

Used on https://karl-voit.at website containing thousands of postings.

I tried to use it and it's difficult to setup for my own use.

** Use org-html-export and run exports manually

Check How-do-I-blog.org file for details.

#+begin_src emacs-lisp
(defun pp/export-to-blog ()
  "Converts current Org buffer to html and moves it to blog sources folder."
  (interactive)
  (let ((filename (org-html-export-to-html)))
    (rename-file filename "~/Documents/Projects/velppa.github.io/" t)))
#+end_src

This approach works fine, but it has certain limitations:

- Each post should live in it's own org file
- Hard to setup styling, toolbar, footer and references to common
  pages

*** Example post generated with =org-html-export=                    :blog:
:PROPERTIES:
:EXPORT_HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css"/>
:EXPORT_AUTHOR: Pavel P.
:EXPORT_FILE_NAME: example-blog-post.html
:EXPORT_DATE: <2021-05-01 Sat>
:EXPORT_OPTIONS: toc:nil num:3 H:4 ^:nil pri:t
:END:

#+begin_abstract
This post is a showcase of various elements that can present in a blog
post. It's a template and a reference post where I describe how do I
blog.

Abstract is a short description of the note which goes before Table of
Contents.
#+end_abstract

#+TOC: headlines 2

**** Exporting a post to an html

Post can be a separate org document or a subtree in an org document.
For example, I plan to export Emacs-related posts from my Emacs
configuration.

Some text inside section one.

Text can be organised in paragraphs.

To export an note, add needed properties and run (org-export-dispatch)
using =C-c C-e C-s h o=.

**** Section two

Source code block:

#+begin_src calc
2 + 3 + 4
#+end_src

#+RESULTS:
: 9

**** Section three

Let's add some quote:

#+begin_quote
E = m * c^2
---
Albert Einstein
#+end_quote







** Maybe write my own static site generator?
<2021-04-24 Sat>

- Powered by OrgMode, add a tag :blog: on a subtree and manually run M-x command
- Templating based on [[https://clarete.li/templatel/][templatel]] package


* Notes
** Deft - a package for dealing with text notes
<2020-11-22 Sun>

Similar to ideas of Notational Velocity (and Wiki) to have a plain
list of notes allowing quickly filtering and searching for them.

However, there are some caveats of using Deft:

- =deft-auto-save-interval= is by default set to 1, which triggers
  autosaving the current buffer every 1 second. Since I also have
  removing trailing whitespaces on save enabled, that setting were
  actually preventing from writing any text, cutting spaces.
  Setting it to 0 solves the problem, really insane default value.

#+begin_src emacs-lisp
(use-package deft :ensure t
  :config
  (setq
   deft-auto-save-interval 0
   deft-extensions '("org")
   deft-default-extension "org"
   deft-use-filename-as-title nil
   deft-use-filter-string-for-filename t
   deft-org-mode-title-prefix t
   deft-file-naming-rules
   '((noslash . "-")
     (nospace . "-")
     (case-fn . capitalize))
   deft-directory "/Users/pavel/Documents/Projects/Blog"))
#+end_src

When creating a new file using =deft-new-file= and above configuration
it uses deft filter value for the title and filename. The problem is
that I rarely use Deft' filtering, but instead use =C-s= to run
Swiper. So, here is a custom function for creating a new note, which
prompts for a string, sets Deft filter to it and creates new file in
Deft directory.


#+begin_src emacs-lisp
(defun pp/deft-new-file (title)
  "Create new note with provided TITLE using Deft."
  (interactive "sTitle for a new note: ")
  (deft-filter title t)
  (deft-new-file))
#+end_src

*** NotDeft
Spin-off of Deft for searching in a set of folders and use Deft-inspired UI.

https://tero.hasu.is/notdeft/

** Smart Notes / Slip-Box / ZettelKasten

That topic gained lots of popularity in Summer 2020, including several
posts on HN and Reddit, in particular ZettelDeft package that uses
Deft as file manager and creates backlinks between notes. I tried to
use it and found too complicated for my needs, so decided not use it
for now.

#+begin_src emacs-lisp
;; (use-package zetteldeft
;;   :after deft
;;   :config
;;     (zetteldeft-set-classic-keybindings))
#+end_src

* Recording video
<2020-09-22 Tue>
https://macreports.com/record-face-screen-mac/

* Jet - transforms between JSON, EDN and Transit
<2020-09-21 Mon>
#+begin_src  emacs-lisp
(defun pp/jet-edn-prettify ()
  "Prettyfy selection of buffer using jet."
  (interactive)
  (shell-command-on-region
   (region-beginning)
   (region-end)
   "jet --pretty --edn-reader-opts '{:default tagged-literal}'"
   (current-buffer)
   t
   "*jet error buffer*"
   t))

(defun pp/jet-edn-to-json ()
  "Prettyfy selection of buffer using jet."
  (interactive)
  (shell-command-on-region
   (region-beginning)
   (region-end)
   "jet --pretty --from edn --to json"
   (current-buffer)
   t
   "*jet error buffer*"
   t))

(defun pp/jet-json-to-edn ()
  "Prettyfy selection of buffer using jet."
  (interactive)
  (shell-command-on-region
   (region-beginning)
   (region-end)
   "jet --pretty --from json --to edn --keywordize '#((if (str/includes? % \" \") str keyword) %)'"
   (current-buffer)
   t
   "*jet error buffer*"
   t))
#+end_src

* Command log mode - record keystrokes
:PROPERTIES:
:UPDATED:  <2021-06-19 Sat>
:END:
<2020-09-22 Tue>

Although the mode looks useful, it sets the =C-c <char>= keybinding
which is reserved for the user, so I unset it here. There's an
[[https://github.com/lewang/command-log-mode/issues/4][command-line-mode#4]] opened for that.

#+begin_src emacs-lisp
(use-package command-log-mode :ensure t
:config
 (global-unset-key
   (kbd command-log-mode-key-binding-open-log)))
#+end_src

* Collaborative editing, Floobits, Live Share

#+begin_src emacs-lisp
(use-package floobits :ensure t :defer t)
#+end_src

* Packages to try someday
- Productivity tips :: https://news.ycombinator.com/item?id=22129636
- Literate Devops ::
  http://howardism.org/Technical/Emacs/literate-devops.html
  Discussion: https://news.ycombinator.com/item?id=16559004
- Purpose :: Manage Windows and Buffers According to Purposes
  https://github.com/bmag/emacs-purpose

* Trying packages

#+begin_src emacs-lisp
(use-package try :ensure t)
#+end_src

* Reading from s3 using =sqlc= tool
<2020-11-18 Wed>

#+begin_src emacs-lisp
(defun pp/sqlc (url)
  "Run sql command with provided URL and other options."
  (interactive "sURL for sqlc: ")
  (let* ((out-buffer-name (first (split-string url)))
         (err-buffer-name "*sqlc errors*")
         (out-buffer (get-buffer-create out-buffer-name))
         (err-buffer (get-buffer-create err-buffer-name)))
    (with-current-buffer out-buffer (erase-buffer))
    (with-current-buffer err-buffer (erase-buffer))
    (shell-command (format "sqlc -f %s" url) out-buffer err-buffer-name)))
#+end_src

* Typing response
<2020-11-22 Sun> <2021-01-13 Wed>

Sometimes I feel that typing feedback in Emacs is really slow, like
visually noticable lag when I press the button and a character appears
on the screen.

It is particularly noticable when opened on 27" display. Turning from
Org-mode to Fundamental mode doesn't make huge difference.

There's no problem on MacBook Pro M1 which I use nowadays.

* Emacs-webkit - using Safari from Emacs
<2020-11-22 Sun> <2021-06-20 Sun>

[[https://www.reddit.com/r/emacs/comments/jyowe0/introducing_emacswebkit_a_successor_to/][Announcement on Reddit]]

#+begin_quote
emacs-webkit requires at least Emacs 28
#+end_quote

#+begin_example emacs-lisp
(add-to-list 'load-path "~/.emacs.d/packages/emacs-webkit")
(require 'webkit)
(global-set-key (kbd "C-c w") 'webkit) ;; Bind to whatever global key binding you want if you want
(require 'webkit-ace) ;; If you want link hinting
(require 'webkit-dark) ;; If you want to use the simple dark mode
#+end_example

On <2021-07-03 Sat> I compiled emacs-plus@28 using =--with-xwidgets=,
what does it mean to using with Safari?

* TODO How to explicitly record the mental stack?
<2020-11-22 Sun>
https://www.reddit.com/r/emacs/comments/jxvm1h/how_to_explicitly_record_the_mental_stack/

* Opening file in External App
<2021-03-20 Sat>

#+begin_src emacs-lisp
(defun xah-open-in-external-app (&optional @fname)
  "Open the current file or dired marked files in external app.
The app is chosen from your OS's preference.

When called in emacs lisp, if @fname is given, open that.

URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
Version 2019-11-04"
  (interactive)
  (let* (
         ($file-list
          (if @fname
              (progn (list @fname))
            (if (string-equal major-mode "dired-mode")
                (dired-get-marked-files)
              (list (buffer-file-name)))))
         ($do-it-p (if (<= (length $file-list) 5)
                       t
                     (y-or-n-p "Open more than 5 files? "))))
    (when $do-it-p
      (cond
       ((string-equal system-type "windows-nt")
        (mapc
         (lambda ($fpath)
           (w32-shell-execute "open" $fpath)) $file-list))
       ((string-equal system-type "darwin")
        (mapc
         (lambda ($fpath)
           (shell-command
            (concat "open " (shell-quote-argument $fpath))))  $file-list))
       ((string-equal system-type "gnu/linux")
        (mapc
         (lambda ($fpath) (let ((process-connection-type nil))
                            (start-process "" nil "xdg-open" $fpath))) $file-list))))))
#+end_src
* PlantUML for creating diagrams
<2021-02-18 Thu>
Link: https://github.com/skuro/plantuml-mode

#+begin_src emacs-lisp
(use-package plantuml-mode :ensure t
  :config
  (setq org-plantuml-jar-path "/usr/local/lib/plantuml.jar"
        plantuml-default-exec-mode 'jar)
  (org-display-inline-images))
#+end_src

The below function is from [[https://gist.github.com/rpl/547521][planuml_helpers.el]] file:

#+begin_src emacs-lisp
(defun pp/plantuml-render-buffer ()
  "Render current buffer in planuml, saves to the buffer's directory."
  (interactive)
  (message "PLANTUML Start rendering")
  (shell-command (concat "java -jar /usr/local/lib/plantuml.jar "
                         buffer-file-name))
  (message (concat "PLANTUML Rendered:  " (buffer-name))))
#+end_src

** Examples
*** Sequence diagram
#+begin_example plantuml :file sample-sequence.png
Bob ->x Alice
Bob -> Alice
Bob ->> Alice
Bob -\ Alice
Bob \\- Alice
Bob //-- Alice

Bob ->o Alice
Bob o\\-- Alice

Bob <-> Alice
Bob <->o Alice


Alice -> Bob: Authentication Request

alt successful case

    Bob -> Alice: Authentication Accepted

else some kind of failure

    Bob -> Alice: Authentication Failure
    group My own label
    Alice -> Log : Log attack start
        loop 1000 times
            Alice -> Bob: DNS Attack
        end
    Alice -> Log : Log attack end
    end

else Another type of failure

   Bob -> Alice: Please repeat

end

Alice->Bob : hello
note left: this is a first note

Bob->Alice : ok
note right: this is another note

Bob->Bob : I am thinking
note left
a note
can also be defined
on several lines
end note


Alice -> Bob: Authentication Request
...
Bob --> Alice: Authentication Response
...5 minutes later...
Bob --> Alice: Good Bye !

#+end_example

#+RESULTS:
[[file:sample-sequence.png]]

*** JSON
#+begin_example plantuml :file json.png
@startjson
{
  "firstName": "John",
  "lastName": "Smith",
  "isAlive": true,
  "age": 27,
  "address": {
    "streetAddress": "21 2nd Street",
    "city": "New York",
    "state": "NY",
    "postalCode": "10021-3100"
  },
  "phoneNumbers": [
    {
      "type": "home",
      "number": "212 555-1234"
    },
    {
      "type": "office",
      "number": "646 555-4567"
    }
  ],
  "children": [],
  "spouse": null
}
@endjson
#+end_example

* Convert text into Slack's Alphabet Emojis
<2020-12-09 Wed>

Slack recently released alphabet emojis, meaning we can start writing
text using them! What a nice idea!

And Emacs will help us with that, so having a function which takes
plain text and converts it to emojis.

Let's write it:


#+begin_src emacs-lisp

#+end_src

* Autoremove asked to delete 15 packages that I use
<2020-12-12 Sat>

#+begin_quote
Packages to delete: 15 (xref tide rainbow-mode rainbow-delimiters
project popup paredit flymake flycheck eldoc eglot dumb-jump
dired-single company color-identifiers-mode), proceed? (y or n) n

Package ‘xref-1.0.4’ deleted.
Package ‘tide-20201031.539’ deleted.
Package ‘rainbow-mode-1.0.5’ deleted.
Package ‘rainbow-delimiters-20200827.321’ deleted.
Package ‘project-0.5.2’ deleted.
Package ‘popup-20200610.317’ deleted.
Package ‘paredit-20191121.2328’ deleted.
Package ‘flymake-1.0.9’ deleted.
Package ‘flycheck-20201105.423’ deleted.
Package ‘eldoc-1.11.0’ deleted.
Package ‘eglot-20201103.1026’ deleted.
Package ‘dumb-jump-20201205.1625’ deleted.
Package ‘dired-single-20200824.708’ deleted.
Package ‘company-20201120.1115’ deleted.
Package ‘color-identifiers-mode-20201029.2325’ deleted.
#+end_quote

Let's see if I actually need those after I remove.

* Mini frame - display minibuffer at the center of the screen
<2020-12-12 Sat>

I disabled it temporary due to switch from Ivy+Swiper+Counsel to
Selectrum+Consult.

#+begin_example emacs-lisp
(use-package mini-frame :ensure t
  :config
  (setq mini-frame-show-parameters
        '((left . 0.5)
          (top . 0.3)
          (width . 0.75)))
  ;;(add-to-list 'mini-frame-ignore-commands 'swiper-isearch)
  (mini-frame-mode -1))
#+end_example

* Vega - visualisation grammar
<2020-12-13 Sun>

https://github.com/applied-science/emacs-vega-view

#+begin_src emacs-lisp
(use-package vega-view :ensure t)
#+end_src

* prism.el - highlight code by depth
<2020-12-28 Mon>

#+begin_src emacs-lisp
(use-package prism :ensure t
  :hook (prog-mode-hook . prism-mode))
#+end_src

#+begin_example emacs-lisp
(prism-set-colors :num 16
  :desaturations (cl-loop for i from 0 below 16 collect (* i 0.95))
  :lightens (cl-loop for i from 0 below 16 collect (* i 0.05))
  :colors (list "sandy brown" "dodgerblue" "medium sea green" "red")
  :comments-fn (lambda (color) (prism-blend color (face-attribute 'font-lock-comment-face :foreground) 0.25))
  :strings-fn (lambda (color) (prism-blend color "white" 1.7)))
#+end_example

* Emacs NES emulator
<2021-01-08 Fri>

Didn't end having it set up because of reviews from
the author saying it's painfully slow.

#+begin_example
(add-to-list 'load-path "~/.emacs.d/packages/emacs-nes")
(load-library 'nes)
#+end_example

* Working with S3
<2021-01-15 Fri>

I found =s3ed= mode - https://github.com/mattusifer/s3ed.

#+begin_example emacs-lisp
(try-and-refresh 's3ed)
(s3ed-mode)
(s3ed-find-file)
#+end_example

#+begin_src emacs-lisp
(use-package s3ed :ensure t
  :commands s3ed-find-file
  :config (s3ed-mode))
#+end_src

* TRAMP
<2021-01-16 Sat>

The method part of remote file names is mandatory now.
A valid remote file name starts with "/method:host:" or
"/method:user@host:".

#+begin_src emacs-lisp
(setq tramp-default-method "ssh")
#+end_src

* Finda
<2021-01-19 Tue>

https://keminglabs.com/finda/setup/

As of <2021-07-03 Sat> I don't actually use Finda, probably due to
lack of integration with Safari.

#+begin_src emacs-lisp
(load "~/.finda/integrations/emacs/finda.el")
#+end_src

#+begin_src css
// original .finda/theme.css
/* Note: Only Finda customers can customize themes. */

/* These styles apply in all modes. */
:root {
    --color-background: hsl(0, 0%, 90%);
    --color-highlight: #af0a0a;
    --color-text: black;

    /* AnonymousPro ships with Finda. */
    /* Specify local fonts via their PostScript name. */
    /* You can also add @font-face declarations for more control */
    /* See: https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face */
    --font-family: 'AnonymousPro';
    --font-size: 16px;
}

/* These values apply in OS X 10.14 (Mojave) light mode. */
[data-theme='light'] {

}

/* These values only apply in OS X 10.14 (Mojave) dark mode. */
[data-theme='dark'] {
    --color-highlight: hsl(357,  60%,  60%);
    --color-background: #2f2f32;
    --color-text: #bebec5;
}
#+end_src

* Testing how built-in calc works with Babel                           :calc:
<2021-01-26 Tue>

[[https://www.gnu.org/software/emacs/manual/html_mono/calc.html][Documentation]]

#+begin_src calc
fsolve(x*2+x=4,x)
#+end_src

#+RESULTS:
: x = 1.33333333333

#+begin_src calc :results verbatim
30*1024*1024
#+end_src

#+RESULTS:
: 31457280

#+begin_src calc
date(<Sun Aug 11, 2013>)
#+end_src

#+RESULTS:
: 735091

#+begin_src calc
unixtime(1498640400)
#+end_src

#+RESULTS:
: <11:00am Wed Jun 28, 2017>

#+begin_src calc :var x=5 :var y=2
x + y
#+end_src

#+RESULTS:
: 7

#+begin_src calc
6918 * 12
#+end_src

#+RESULTS:
: 83016

* Beginend - go to meaningful begin/end of the buffer
<2021-02-06 Sat>

Found it on a [[http://emacslife.com/emacs-chats/chat-magnar-sveen.html][Emacs Chat notes]] between Sacha Chua and Magnar Sveen,
the creator of the [[http://emacsrocks.com][Emacs Rocks]] screencast series.

#+begin_src emacs-lisp
(use-package beginend :ensure t
  :demand t
  :diminish beginend-global-mode
  :config
  (beginend-global-mode))
#+end_src

* Vim for advanced users
<2021-03-07 Sun>

https://thevaluable.dev/vim-advanced/

Let's try to see how we'd do this in Emacs (Evil).

** The Types of Registers

1. The unnamed register ="=

2. The numbered registers =0= to =9=

3. The small delete register =-=

  Contains any deleted or changed content smaller than one line.
  It’s not written if you specified a register with ".

4. The named registers (range from =a= to =z=)

   - aren't used unless you don’t specify them with the keystroke ="=
   - You can use the uppercase name of each register to append to it
     (instead of overwriting it)

5. The read-only registers (=.=, =%= and =:=)

   - =.= :: in vim it contains the last inserted text, doesn't work in Emacs
   - =%= :: contains the full path of the current file, if it's a file
   - =:= :: in vim it contains the last executed command, doesn't work in Emacs

10. The last search pattern register =/=

    This register contains your last search.

* Preparing tweets

#+begin_src emacs-lisp
(defun pp/count-words-region (posBegin posEnd)
  "Print number of words and chars in region.

URL `http://ergoemacs.org/emacs/elisp_count-region.html'"
  (interactive "r")
  (message "Counting …")
  (save-excursion
    (let (wordCount charCount)
      (setq wordCount 0)
      (setq charCount (- posEnd posBegin))
      (goto-char posBegin)
      (while (and (< (point) posEnd)
                  (re-search-forward "\\w+\\W*" posEnd t))
        (setq wordCount (1+ wordCount)))

      (message "Words: %d. Chars: %d." wordCount charCount))))
#+end_src

* Reading EPUB books in Emacs
<2021-02-12 Fri>

Apple Books stopped downloading books stored in iCloud, and overall
experience had been quite terrible.

Let's try [[https://depp.brause.cc/nov.el/][nov.el]] mode.

#+begin_src emacs-lisp
(use-package visual-fill-column :ensure t)

(use-package nov :ensure t
  :config
  (defun pp/nov-mode-hook ()
    "Hook for nov-mode (reading EPUBs)."
    (setq visual-fill-column-center-text t)
    (visual-line-mode)
    (visual-fill-column-mode))
  (setq nov-text-width 60)
  :hook (nov-mode-hook . pp/nov-mode-hook))

(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

* Repeat last command run via =M-x=
<2021-02-18 Thu> <2021-06-20 Sun>

Links:
- [[http://ergoemacs.org/emacs/emacs_repeat_command.html][Emacs Repeat Command]]
- [[https://www.masteringemacs.org/article/repeating-commands-emacs][Repeating Commands in Emacs]]

- (repeat), =C-x z= :: repeat last

* Reading RSS with elfeed
<2021-03-16 Tue>

#+begin_src emacs-lisp
(use-package elfeed :ensure t
  :config
  (setq elfeed-feeds
      '("https://daringfireball.net/feeds/main"
        "https://avva.livejournal.com/data/rss"
        "https://reddit.com/r/emacs.rss"
        "https://reddit.com/r/clojure.rss"
        "https://blog.tecosaur.com/tmio/rss.xml"
        "https://kieranhealy.org/index.xml")))
#+end_src

* EWW - Web browser inside Emacs
<2021-03-20 Sat>

- =s-e= :: Open URL at point using EWW

#+begin_src emacs-lisp
(require 'thingatpt)

(defun pp/open-in-eww ()
  "Opens url at point using `eww'"
  (interactive)
  (eww (thing-at-point 'url)))
#+end_src

This example enables opening http and https links in eww.
Inspired by https://stackoverflow.com/a/66670455:

#+begin_example emacs-lisp
(eval-after-load 'ol
  '(dolist (scheme '("http" "https"))
     (org-link-set-parameters
      scheme :follow (lambda (url) (eww (substring url 2))))))
#+end_example

#+begin_example emacs-lisp
((lambda (url)
   (message "hello from %s" url)
   url) "some url")

(general-define-key
  "M-1" '(lambda () (interactive) (message "M-1")))
#+end_example

** TODO Fix =pp/open-in-eww=
Maybe after upgrading to native compilation, but as of <2021-07-03 Sat>
=pp/open-in-eww= no longer works with error:

#+begin_src
string-trim: Wrong type argument: stringp, nil
#+end_src

** TODO Check [[https://github.com/milkypostman/org-eww][org-eww]]
A minor mode for previewing Org documents using eww.

* Popper - manage popup windows
<2021-03-20 Sat>

Link: https://www.reddit.com/r/emacs/comments/m5ibyh/

- =C-x ^= :: make current window taller, =.= to repeat

Update: On <2021-04-13 Tue> I disabled the package as *eshell* windows
it manages are too short.

#+begin_example emacs-lisp
(use-package popper :ensure t
  :bind (("C-§"   . popper-toggle-latest)
         ("M-§"   . popper-cycle)
         ("C-M-§" . popper-toggle-type))
  :init
  (setq
   popper-reference-buffers '("\\*Messages\\*"
                              "\\*Warnings\\*"
                              "\\*Backtrace\\*"
                              ".*eshell\\*"
                              "Output\\*$"
                              help-mode
                              compilation-mode))
  (popper-mode -1))

(setq popper-group-function #'popper-group-by-project)
#+end_example

* Pasting into Minibuffer and ISearch from macOS clipboard
<2021-04-19 Mon>

To use =s-c=, =s-x=, =s-v= in macOS I use =simpleclip.el= package.
However it doesn't provide options to insert into minibuffer and
ISearch lines, so I have added support for =s-v= keybinding.

#+begin_src emacs-lisp
(defun pp/paste-in-minibuffer ()
  (interactive)
  (local-set-key (kbd "s-v") 'simpleclip-paste))

(add-hook 'minibuffer-setup-hook 'pp/paste-in-minibuffer)

(defun pp/paste-in-isearch ()
  (interactive)
  (isearch-yank-string (simpleclip-get-contents)))

(define-key isearch-mode-map (kbd "s-v") 'pp/paste-in-isearch)
#+end_src

Links:

- [[https://www.emacswiki.org/emacs/IncrementalSearch][IncrementalSearch on EmacsWiki]]
- [[http://blog.binchen.org/posts/paste-string-from-clipboard-into-minibuffer-in-emacs.html][Note on Chen's blog]]


** DONE Fix pasting into ISearch to not convert to lowercase
CLOSED: [2021-07-03 Sat 13:03]
<2021-04-21 Wed> <2021-07-03 Sat>

Converting to lowercase happens only on pasting to ISearch string (via
both macOS clipboard and Emacs' kill-ring). It pastes to Minibuffer
fine.

This is expected behaviour since ISearch is case-insensitive by default.
See [[https://emacs.stackexchange.com/questions/41896/isearch-paste-text-in-mini-buffer-is-not-same][an answer on StackExchange]].

* Glasses minor mode
<2021-04-24 Sat>

=glasses-mode= minor mode displays underscores between all the pairs
of lower and upper English letters. (This only displays underscores,
the text is not changed actually.) Alternatively, you can say you want
the capitals in some given face (e.g. bold).

* Posframe - have a popup at point
<2021-04-25 Sun>

Postframe is a built-in package.

#+begin_src emacs-lisp
(use-package which-key-posframe :ensure t
  :defer t
  :config
  (which-key-posframe-mode -1))
#+end_src

* [[https://github.com/magit/transient][Transient]] - package to create hydra-like shortcut prefixes
<2021-04-25 Sun>

[[https://github.com/olivertaylor/dotfiles/blob/master/emacs/lisp/oht-transient.el][Example of configuration]]

* Midnight-mode - run commands on schedule
<2021-04-28 Wed>

#+begin_example emacs-lisp
(defun pp/midnight-mode-hook ()
  "Run command on schedule using midnight-mode."
  (interactive)
  (when (eq evil-state 'normal) (push-mark)))

(use-package midnight :ensure t
  :hook
  (midnight-mode-hook . pp/midnight-mode-hook)
  :config
  (setq midnight-period 60)
  (midnight-mode -1))
#+end_example

* Reading [[https://tecosaur.github.io/emacs-config/config.html#teach-man-fish][tecosaur's Doom Emacs Configuration]]
<2021-04-28 Wed>

I tried to add advice, but failed to achieve anything handy.

Links:
- https://www.emacswiki.org/emacs/AdvisingFunctions

#+begin_example emacs-lisp
(defun pp/advice-split-window-right (&optional)
    (other-window 0)
    (frog-jump-buffer)
    (other-window 0))

(advice-add 'split-window-right :after
  'pp/advice-split-window-right)

(advice-remove 'split-window-right 'pp/advice-split-window-right)
#+end_example

* DONE Emoji doesn't work in emacs-plus@28                          :Emacs28:
CLOSED: [2021-04-30 Fri 21:15]
<2021-04-30 Fri>

Found the below snippet on [[https://github.com/d12frosted/homebrew-emacs-plus/issues/53][emacs-plus#53]]:

#+begin_src emacs-lisp
(set-fontset-font t 'symbol
                    (font-spec :family "Apple Color Emoji")
                    nil 'prepend)

#+end_src

* Calculations using ledger postings

#+begin_src calc
+55869.34 RUB + 7335.80 RUB +14671.61 RUB
#+end_src

#+RESULTS:
: 77876.75 RUB

* Affe - Asynchronous Fuzzy Finder
<2021-05-23 Sun>

A new package from the author of Consult. Author - github/minad (the
same author as for Consult and Affe packages).

[[https://www.reddit.com/r/emacs/comments/ngydg4/affeel_asynchronous_fuzzy_finder_for_emacs/][Announcement on Reddit.]]

https://github.com/minad/affe

Don't see major differences to (pp/consult-ripgrep), =s-f= and
(project-find-file), =s-p= that I use, so won't add keybidindings.

#+begin_src emacs-lisp
(setq affe-find-command "fd")

(defun pp/find-file-in-current-project ()
  "Find file in the current project using affe."
  (interactive)
  (affe-find (project-root (project-current))))
#+end_src

* Viewing diffs
<2021-06-15 Tue>

#+begin_example emacs-lisp
(defun pp/update-diff-colors ()
  "Update the colors for diff faces."
  (set-face-attribute 'diff-added nil
                      :foreground "white" :background "blue")
  (set-face-attribute 'diff-removed nil
                      :foreground "white" :background "red3")
  (set-face-attribute 'diff-changed nil
                      :foreground "white" :background "purple"))

(eval-after-load "diff-mode"
  '(pp/update-diff-colors))

#+end_example

* Graphviz, DOT, graphs
:PROPERTIES:
:CREATED:  <2021-06-21 Mon>
:END:

#+begin_src emacs-lisp
(use-package graphviz-dot-mode :ensure t)

(use-package dynamic-graphs :ensure t)
#+end_src

#+begin_example emacs-lisp
(dynamic-graphs-display-graph
 "test" nil
 (lambda ()
   (insert "digraph Gr {A->B B->C C->A A->E->F->G}"))
 '(2 remove-cycles "N {style=\"filled\",fillcolor=\"lightgreen\"}"
     node-refs boxize))
#+end_example

* Hackernews
<2021-06-27 Sun>

- Keymap
  - RET :: Open link in default (external) browser
  - t :: Open link in text-based browser within Emacs
  - r :: Mark link as visited
  - R :: Mark link as unvisited
  - n :: Move to next title link
  - p :: Move to previous title link
  - TAB :: Move to next comments count link
  - S-TAB :: Move to previous comments count link
  - m :: Load more stories
  - g :: Reload stories
  - f :: Prompt user for a feed to switch to
  - q :: Quit

#+begin_src emacs-lisp
(use-package hackernews :ensure t)
#+end_src

* Native compilation in Emacs 28                                    :Emacs28:
<2021-06-27 Sun> <2021-06-29 Tue> <2021-07-03 Sat>

https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation

#+begin_example emacs-lisp
(if (and (fboundp 'native-comp-available-p)
       (native-comp-available-p))
  (message "Native compilation is available")
(message "Native complation is *not* available"))

(if (functionp 'json-serialize)
  (message "Native JSON is available")
(message "Native JSON is *not* available"))
#+end_example

- [X] Compile emacs-plus@28 with native compilation

* Folds using origami-mode
<2021-06-28 Mon>

#+begin_src emacs-lisp
(use-package origami :ensure t)
#+end_src

In order to use enable =(origami-mode)= in a buffer, then =z c= will
close the fold.
